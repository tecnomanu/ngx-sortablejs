{"ast":null,"code":"import { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { BehaviorSubject } from 'rxjs';\nimport { MiniStore, MiniState } from 'ngx-bootstrap/mini-ngrx';\nimport { Injectable, ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, forwardRef, Input, Output, ViewEncapsulation, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction TimepickerComponent_td_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\");\n    ɵngcc0.ɵɵtext(1, \"\\u00A0\\u00A0\\u00A0\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction TimepickerComponent_td_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"td\")(1, \"a\", 1);\n    ɵngcc0.ɵɵlistener(\"click\", function TimepickerComponent_td_7_Template_a_click_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r19);\n      const ctx_r18 = ɵngcc0.ɵɵnextContext();\n      return ctx_r18.changeMinutes(ctx_r18.minuteStep);\n    });\n    ɵngcc0.ɵɵelement(2, \"span\", 2);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassProp(\"disabled\", !ctx_r1.canIncrementMinutes || !ctx_r1.isEditable);\n  }\n}\n\nfunction TimepickerComponent_td_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\");\n    ɵngcc0.ɵɵtext(1, \"\\u00A0\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction TimepickerComponent_td_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r21 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"td\")(1, \"a\", 1);\n    ɵngcc0.ɵɵlistener(\"click\", function TimepickerComponent_td_9_Template_a_click_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r21);\n      const ctx_r20 = ɵngcc0.ɵɵnextContext();\n      return ctx_r20.changeSeconds(ctx_r20.secondsStep);\n    });\n    ɵngcc0.ɵɵelement(2, \"span\", 2);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassProp(\"disabled\", !ctx_r3.canIncrementSeconds || !ctx_r3.isEditable);\n  }\n}\n\nfunction TimepickerComponent_td_10_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\");\n    ɵngcc0.ɵɵtext(1, \"\\u00A0\\u00A0\\u00A0\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction TimepickerComponent_td_11_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"td\");\n  }\n}\n\nfunction TimepickerComponent_td_15_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\");\n    ɵngcc0.ɵɵtext(1, \"\\u00A0:\\u00A0\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction TimepickerComponent_td_16_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r23 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"td\", 4)(1, \"input\", 8);\n    ɵngcc0.ɵɵlistener(\"wheel\", function TimepickerComponent_td_16_Template_input_wheel_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r23);\n      const ctx_r22 = ɵngcc0.ɵɵnextContext();\n      ctx_r22.prevDef($event);\n      return ctx_r22.changeMinutes(ctx_r22.minuteStep * ctx_r22.wheelSign($event), \"wheel\");\n    })(\"keydown.ArrowUp\", function TimepickerComponent_td_16_Template_input_keydown_ArrowUp_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r23);\n      const ctx_r24 = ɵngcc0.ɵɵnextContext();\n      return ctx_r24.changeMinutes(ctx_r24.minuteStep, \"key\");\n    })(\"keydown.ArrowDown\", function TimepickerComponent_td_16_Template_input_keydown_ArrowDown_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r23);\n      const ctx_r25 = ɵngcc0.ɵɵnextContext();\n      return ctx_r25.changeMinutes(-ctx_r25.minuteStep, \"key\");\n    })(\"change\", function TimepickerComponent_td_16_Template_input_change_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r23);\n      const ctx_r26 = ɵngcc0.ɵɵnextContext();\n      return ctx_r26.updateMinutes($event.target.value);\n    });\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"has-error\", ctx_r7.invalidMinutes);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassProp(\"is-invalid\", ctx_r7.invalidMinutes);\n    ɵngcc0.ɵɵproperty(\"readonly\", ctx_r7.readonlyInput)(\"disabled\", ctx_r7.disabled)(\"value\", ctx_r7.minutes);\n  }\n}\n\nfunction TimepickerComponent_td_17_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\");\n    ɵngcc0.ɵɵtext(1, \"\\u00A0:\\u00A0\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction TimepickerComponent_td_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r28 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"td\", 4)(1, \"input\", 9);\n    ɵngcc0.ɵɵlistener(\"wheel\", function TimepickerComponent_td_18_Template_input_wheel_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r28);\n      const ctx_r27 = ɵngcc0.ɵɵnextContext();\n      ctx_r27.prevDef($event);\n      return ctx_r27.changeSeconds(ctx_r27.secondsStep * ctx_r27.wheelSign($event), \"wheel\");\n    })(\"keydown.ArrowUp\", function TimepickerComponent_td_18_Template_input_keydown_ArrowUp_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r28);\n      const ctx_r29 = ɵngcc0.ɵɵnextContext();\n      return ctx_r29.changeSeconds(ctx_r29.secondsStep, \"key\");\n    })(\"keydown.ArrowDown\", function TimepickerComponent_td_18_Template_input_keydown_ArrowDown_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r28);\n      const ctx_r30 = ɵngcc0.ɵɵnextContext();\n      return ctx_r30.changeSeconds(-ctx_r30.secondsStep, \"key\");\n    })(\"change\", function TimepickerComponent_td_18_Template_input_change_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r28);\n      const ctx_r31 = ɵngcc0.ɵɵnextContext();\n      return ctx_r31.updateSeconds($event.target.value);\n    });\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r9 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"has-error\", ctx_r9.invalidSeconds);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassProp(\"is-invalid\", ctx_r9.invalidSeconds);\n    ɵngcc0.ɵɵproperty(\"readonly\", ctx_r9.readonlyInput)(\"disabled\", ctx_r9.disabled)(\"value\", ctx_r9.seconds);\n  }\n}\n\nfunction TimepickerComponent_td_19_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\");\n    ɵngcc0.ɵɵtext(1, \"\\u00A0\\u00A0\\u00A0\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction TimepickerComponent_td_20_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r33 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"td\")(1, \"button\", 10);\n    ɵngcc0.ɵɵlistener(\"click\", function TimepickerComponent_td_20_Template_button_click_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r33);\n      const ctx_r32 = ɵngcc0.ɵɵnextContext();\n      return ctx_r32.toggleMeridian();\n    });\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r11 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassProp(\"disabled\", !ctx_r11.isEditable || !ctx_r11.canToggleMeridian);\n    ɵngcc0.ɵɵproperty(\"disabled\", !ctx_r11.isEditable || !ctx_r11.canToggleMeridian);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\"\", ctx_r11.meridian, \" \");\n  }\n}\n\nfunction TimepickerComponent_td_25_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\");\n    ɵngcc0.ɵɵtext(1, \"\\u00A0\\u00A0\\u00A0\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction TimepickerComponent_td_26_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r35 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"td\")(1, \"a\", 1);\n    ɵngcc0.ɵɵlistener(\"click\", function TimepickerComponent_td_26_Template_a_click_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r35);\n      const ctx_r34 = ɵngcc0.ɵɵnextContext();\n      return ctx_r34.changeMinutes(-ctx_r34.minuteStep);\n    });\n    ɵngcc0.ɵɵelement(2, \"span\", 7);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r13 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassProp(\"disabled\", !ctx_r13.canDecrementMinutes || !ctx_r13.isEditable);\n  }\n}\n\nfunction TimepickerComponent_td_27_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\");\n    ɵngcc0.ɵɵtext(1, \"\\u00A0\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction TimepickerComponent_td_28_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r37 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"td\")(1, \"a\", 1);\n    ɵngcc0.ɵɵlistener(\"click\", function TimepickerComponent_td_28_Template_a_click_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r37);\n      const ctx_r36 = ɵngcc0.ɵɵnextContext();\n      return ctx_r36.changeSeconds(-ctx_r36.secondsStep);\n    });\n    ɵngcc0.ɵɵelement(2, \"span\", 7);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r15 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassProp(\"disabled\", !ctx_r15.canDecrementSeconds || !ctx_r15.isEditable);\n  }\n}\n\nfunction TimepickerComponent_td_29_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\");\n    ɵngcc0.ɵɵtext(1, \"\\u00A0\\u00A0\\u00A0\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction TimepickerComponent_td_30_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"td\");\n  }\n}\n\nlet TimepickerActions = /*#__PURE__*/(() => {\n  class TimepickerActions {\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    writeValue(value) {\n      return {\n        type: TimepickerActions.WRITE_VALUE,\n        payload: value\n      };\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n\n    changeHours(event) {\n      return {\n        type: TimepickerActions.CHANGE_HOURS,\n        payload: event\n      };\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n\n    changeMinutes(event) {\n      return {\n        type: TimepickerActions.CHANGE_MINUTES,\n        payload: event\n      };\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n\n\n    changeSeconds(event) {\n      return {\n        type: TimepickerActions.CHANGE_SECONDS,\n        payload: event\n      };\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    setTime(value) {\n      return {\n        type: TimepickerActions.SET_TIME_UNIT,\n        payload: value\n      };\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    updateControls(value) {\n      return {\n        type: TimepickerActions.UPDATE_CONTROLS,\n        payload: value\n      };\n    }\n\n  }\n\n  TimepickerActions.ɵfac = function TimepickerActions_Factory(t) {\n    return new (t || TimepickerActions)();\n  };\n\n  TimepickerActions.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: TimepickerActions,\n    factory: TimepickerActions.ɵfac\n  });\n  TimepickerActions.WRITE_VALUE = '[timepicker] write value from ng model';\n  TimepickerActions.CHANGE_HOURS = '[timepicker] change hours';\n  TimepickerActions.CHANGE_MINUTES = '[timepicker] change minutes';\n  TimepickerActions.CHANGE_SECONDS = '[timepicker] change seconds';\n  TimepickerActions.SET_TIME_UNIT = '[timepicker] set time unit';\n  TimepickerActions.UPDATE_CONTROLS = '[timepicker] update controls';\n  return TimepickerActions;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst dex = 10;\n/** @type {?} */\n\nconst hoursPerDay = 24;\n/** @type {?} */\n\nconst hoursPerDayHalf = 12;\n/** @type {?} */\n\nconst minutesPerHour = 60;\n/** @type {?} */\n\nconst secondsPerMinute = 60;\n/**\n * @param {?=} value\n * @return {?}\n */\n\nfunction isValidDate(value) {\n  if (!value) {\n    return false;\n  }\n\n  if (value instanceof Date && isNaN(value.getHours())) {\n    return false;\n  }\n\n  if (typeof value === 'string') {\n    return isValidDate(new Date(value));\n  }\n\n  return true;\n}\n/**\n * @param {?} controls\n * @param {?} newDate\n * @return {?}\n */\n\n\nfunction isValidLimit(controls, newDate) {\n  if (controls.min && newDate < controls.min) {\n    return false;\n  }\n\n  if (controls.max && newDate > controls.max) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * @param {?} value\n * @return {?}\n */\n\n\nfunction toNumber(value) {\n  if (typeof value === 'number') {\n    return value;\n  }\n\n  return parseInt(value, dex);\n}\n/**\n * @param {?} value\n * @param {?=} isPM\n * @return {?}\n */\n\n\nfunction parseHours(value, isPM = false) {\n  /** @type {?} */\n  const hour = toNumber(value);\n\n  if (isNaN(hour) || hour < 0 || hour > (isPM ? hoursPerDayHalf : hoursPerDay)) {\n    return NaN;\n  }\n\n  return hour === hoursPerDayHalf && !isPM ? 0 : hour;\n}\n/**\n * @param {?} value\n * @return {?}\n */\n\n\nfunction parseMinutes(value) {\n  /** @type {?} */\n  const minute = toNumber(value);\n\n  if (isNaN(minute) || minute < 0 || minute > minutesPerHour) {\n    return NaN;\n  }\n\n  return minute;\n}\n/**\n * @param {?} value\n * @return {?}\n */\n\n\nfunction parseSeconds(value) {\n  /** @type {?} */\n  const seconds = toNumber(value);\n\n  if (isNaN(seconds) || seconds < 0 || seconds > secondsPerMinute) {\n    return NaN;\n  }\n\n  return seconds;\n}\n/**\n * @param {?} value\n * @return {?}\n */\n\n\nfunction parseTime(value) {\n  if (typeof value === 'string') {\n    return new Date(value);\n  }\n\n  return value;\n}\n/**\n * @param {?} value\n * @param {?} diff\n * @return {?}\n */\n\n\nfunction changeTime(value, diff) {\n  if (!value) {\n    return changeTime(createDate(new Date(), 0, 0, 0), diff);\n  }\n  /** @type {?} */\n\n\n  let hour = value.getHours();\n  /** @type {?} */\n\n  let minutes = value.getMinutes();\n  /** @type {?} */\n\n  let seconds = value.getSeconds();\n\n  if (diff.hour) {\n    hour = (hour + toNumber(diff.hour)) % hoursPerDay;\n\n    if (hour < 0) {\n      hour += hoursPerDay;\n    }\n  }\n\n  if (diff.minute) {\n    minutes = minutes + toNumber(diff.minute);\n  }\n\n  if (diff.seconds) {\n    seconds = seconds + toNumber(diff.seconds);\n  }\n\n  return createDate(value, hour, minutes, seconds);\n}\n/**\n * @param {?} value\n * @param {?} opts\n * @return {?}\n */\n\n\nfunction setTime(value, opts) {\n  /** @type {?} */\n  let hour = parseHours(opts.hour);\n  /** @type {?} */\n\n  const minute = parseMinutes(opts.minute);\n  /** @type {?} */\n\n  const seconds = parseSeconds(opts.seconds) || 0;\n\n  if (opts.isPM && hour !== 12) {\n    hour += hoursPerDayHalf;\n  }\n\n  if (!value) {\n    if (!isNaN(hour) && !isNaN(minute)) {\n      return createDate(new Date(), hour, minute, seconds);\n    }\n\n    return value;\n  }\n\n  if (isNaN(hour) || isNaN(minute)) {\n    return value;\n  }\n\n  return createDate(value, hour, minute, seconds);\n}\n/**\n * @param {?} value\n * @param {?} hours\n * @param {?} minutes\n * @param {?} seconds\n * @return {?}\n */\n\n\nfunction createDate(value, hours, minutes, seconds) {\n  return new Date(value.getFullYear(), value.getMonth(), value.getDate(), hours, minutes, seconds, value.getMilliseconds());\n}\n/**\n * @param {?} value\n * @return {?}\n */\n\n\nfunction padNumber(value) {\n  /** @type {?} */\n  const _value = value.toString();\n\n  if (_value.length > 1) {\n    return _value;\n  }\n\n  return `0${_value}`;\n}\n/**\n * @param {?} hours\n * @param {?} isPM\n * @return {?}\n */\n\n\nfunction isHourInputValid(hours, isPM) {\n  return !isNaN(parseHours(hours, isPM));\n}\n/**\n * @param {?} minutes\n * @return {?}\n */\n\n\nfunction isMinuteInputValid(minutes) {\n  return !isNaN(parseMinutes(minutes));\n}\n/**\n * @param {?} seconds\n * @return {?}\n */\n\n\nfunction isSecondInputValid(seconds) {\n  return !isNaN(parseSeconds(seconds));\n}\n/**\n * @param {?} diff\n * @param {?} max\n * @param {?} min\n * @return {?}\n */\n\n\nfunction isInputLimitValid(diff, max, min) {\n  /** @type {?} */\n  const newDate = setTime(new Date(), diff);\n\n  if (max && newDate > max) {\n    return false;\n  }\n\n  if (min && newDate < min) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * @param {?} hours\n * @param {?=} minutes\n * @param {?=} seconds\n * @param {?=} isPM\n * @return {?}\n */\n\n\nfunction isInputValid(hours, minutes = '0', seconds = '0', isPM) {\n  return isHourInputValid(hours, isPM) && isMinuteInputValid(minutes) && isSecondInputValid(seconds);\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @param {?} state\n * @param {?=} event\n * @return {?}\n */\n\n\nfunction canChangeValue(state, event) {\n  if (state.readonlyInput || state.disabled) {\n    return false;\n  }\n\n  if (event) {\n    if (event.source === 'wheel' && !state.mousewheel) {\n      return false;\n    }\n\n    if (event.source === 'key' && !state.arrowkeys) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * @param {?} event\n * @param {?} controls\n * @return {?}\n */\n\n\nfunction canChangeHours(event, controls) {\n  if (!event.step) {\n    return false;\n  }\n\n  if (event.step > 0 && !controls.canIncrementHours) {\n    return false;\n  }\n\n  if (event.step < 0 && !controls.canDecrementHours) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * @param {?} event\n * @param {?} controls\n * @return {?}\n */\n\n\nfunction canChangeMinutes(event, controls) {\n  if (!event.step) {\n    return false;\n  }\n\n  if (event.step > 0 && !controls.canIncrementMinutes) {\n    return false;\n  }\n\n  if (event.step < 0 && !controls.canDecrementMinutes) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * @param {?} event\n * @param {?} controls\n * @return {?}\n */\n\n\nfunction canChangeSeconds(event, controls) {\n  if (!event.step) {\n    return false;\n  }\n\n  if (event.step > 0 && !controls.canIncrementSeconds) {\n    return false;\n  }\n\n  if (event.step < 0 && !controls.canDecrementSeconds) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * @param {?} state\n * @return {?}\n */\n\n\nfunction getControlsValue(state) {\n  const {\n    hourStep,\n    minuteStep,\n    secondsStep,\n    readonlyInput,\n    disabled,\n    mousewheel,\n    arrowkeys,\n    showSpinners,\n    showMeridian,\n    showSeconds,\n    meridians,\n    min,\n    max\n  } = state;\n  return {\n    hourStep,\n    minuteStep,\n    secondsStep,\n    readonlyInput,\n    disabled,\n    mousewheel,\n    arrowkeys,\n    showSpinners,\n    showMeridian,\n    showSeconds,\n    meridians,\n    min,\n    max\n  };\n}\n/**\n * @param {?} value\n * @param {?} state\n * @return {?}\n */\n\n\nfunction timepickerControls(value, state) {\n  /** @type {?} */\n  const hoursPerDayHalf = 12;\n  const {\n    min,\n    max,\n    hourStep,\n    minuteStep,\n    secondsStep,\n    showSeconds\n  } = state;\n  /** @type {?} */\n\n  const res = {\n    canIncrementHours: true,\n    canIncrementMinutes: true,\n    canIncrementSeconds: true,\n    canDecrementHours: true,\n    canDecrementMinutes: true,\n    canDecrementSeconds: true,\n    canToggleMeridian: true\n  };\n\n  if (!value) {\n    return res;\n  } // compare dates\n\n\n  if (max) {\n    /** @type {?} */\n    const _newHour = changeTime(value, {\n      hour: hourStep\n    });\n\n    res.canIncrementHours = max > _newHour;\n\n    if (!res.canIncrementHours) {\n      /** @type {?} */\n      const _newMinutes = changeTime(value, {\n        minute: minuteStep\n      });\n\n      res.canIncrementMinutes = showSeconds ? max > _newMinutes : max >= _newMinutes;\n    }\n\n    if (!res.canIncrementMinutes) {\n      /** @type {?} */\n      const _newSeconds = changeTime(value, {\n        seconds: secondsStep\n      });\n\n      res.canIncrementSeconds = max >= _newSeconds;\n    }\n\n    if (value.getHours() < hoursPerDayHalf) {\n      res.canToggleMeridian = changeTime(value, {\n        hour: hoursPerDayHalf\n      }) < max;\n    }\n  }\n\n  if (min) {\n    /** @type {?} */\n    const _newHour = changeTime(value, {\n      hour: -hourStep\n    });\n\n    res.canDecrementHours = min < _newHour;\n\n    if (!res.canDecrementHours) {\n      /** @type {?} */\n      const _newMinutes = changeTime(value, {\n        minute: -minuteStep\n      });\n\n      res.canDecrementMinutes = showSeconds ? min < _newMinutes : min <= _newMinutes;\n    }\n\n    if (!res.canDecrementMinutes) {\n      /** @type {?} */\n      const _newSeconds = changeTime(value, {\n        seconds: -secondsStep\n      });\n\n      res.canDecrementSeconds = min <= _newSeconds;\n    }\n\n    if (value.getHours() >= hoursPerDayHalf) {\n      res.canToggleMeridian = changeTime(value, {\n        hour: -hoursPerDayHalf\n      }) > min;\n    }\n  }\n\n  return res;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Provides default configuration values for timepicker\n */\n\n\nlet TimepickerConfig = /*#__PURE__*/(() => {\n  class TimepickerConfig {\n    constructor() {\n      /**\n       * hours change step\n       */\n      this.hourStep = 1;\n      /**\n       * hours change step\n       */\n\n      this.minuteStep = 5;\n      /**\n       * seconds changes step\n       */\n\n      this.secondsStep = 10;\n      /**\n       * if true works in 12H mode and displays AM/PM. If false works in 24H mode and hides AM/PM\n       */\n\n      this.showMeridian = true;\n      /**\n       * meridian labels based on locale\n       */\n\n      this.meridians = ['AM', 'PM'];\n      /**\n       * if true hours and minutes fields will be readonly\n       */\n\n      this.readonlyInput = false;\n      /**\n       * if true hours and minutes fields will be disabled\n       */\n\n      this.disabled = false;\n      /**\n       * if true scroll inside hours and minutes inputs will change time\n       */\n\n      this.mousewheel = true;\n      /**\n       * if true the values of hours and minutes can be changed using the up/down arrow keys on the keyboard\n       */\n\n      this.arrowkeys = true;\n      /**\n       * if true spinner arrows above and below the inputs will be shown\n       */\n\n      this.showSpinners = true;\n      /**\n       * show seconds in timepicker\n       */\n\n      this.showSeconds = false;\n      /**\n       * show minutes in timepicker\n       */\n\n      this.showMinutes = true;\n    }\n\n  }\n\n  TimepickerConfig.ɵfac = function TimepickerConfig_Factory(t) {\n    return new (t || TimepickerConfig)();\n  };\n\n  TimepickerConfig.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: TimepickerConfig,\n    factory: TimepickerConfig.ɵfac\n  });\n  return TimepickerConfig;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst initialState = {\n  value: null,\n  config: new TimepickerConfig(),\n  controls: {\n    canIncrementHours: true,\n    canIncrementMinutes: true,\n    canIncrementSeconds: true,\n    canDecrementHours: true,\n    canDecrementMinutes: true,\n    canDecrementSeconds: true,\n    canToggleMeridian: true\n  }\n}; // tslint:disable-next-line:cyclomatic-complexity\n\n/**\n * @param {?=} state\n * @param {?=} action\n * @return {?}\n */\n\nfunction timepickerReducer(state = initialState, action) {\n  switch (action.type) {\n    case TimepickerActions.WRITE_VALUE:\n      {\n        return Object.assign({}, state, {\n          value: action.payload\n        });\n      }\n\n    case TimepickerActions.CHANGE_HOURS:\n      {\n        if (!canChangeValue(state.config, action.payload) || !canChangeHours(action.payload, state.controls)) {\n          return state;\n        }\n        /** @type {?} */\n\n\n        const _newTime = changeTime(state.value, {\n          hour: action.payload.step\n        });\n\n        if ((state.config.max || state.config.min) && !isValidLimit(state.config, _newTime)) {\n          return state;\n        }\n\n        return Object.assign({}, state, {\n          value: _newTime\n        });\n      }\n\n    case TimepickerActions.CHANGE_MINUTES:\n      {\n        if (!canChangeValue(state.config, action.payload) || !canChangeMinutes(action.payload, state.controls)) {\n          return state;\n        }\n        /** @type {?} */\n\n\n        const _newTime = changeTime(state.value, {\n          minute: action.payload.step\n        });\n\n        if ((state.config.max || state.config.min) && !isValidLimit(state.config, _newTime)) {\n          return state;\n        }\n\n        return Object.assign({}, state, {\n          value: _newTime\n        });\n      }\n\n    case TimepickerActions.CHANGE_SECONDS:\n      {\n        if (!canChangeValue(state.config, action.payload) || !canChangeSeconds(action.payload, state.controls)) {\n          return state;\n        }\n        /** @type {?} */\n\n\n        const _newTime = changeTime(state.value, {\n          seconds: action.payload.step\n        });\n\n        if ((state.config.max || state.config.min) && !isValidLimit(state.config, _newTime)) {\n          return state;\n        }\n\n        return Object.assign({}, state, {\n          value: _newTime\n        });\n      }\n\n    case TimepickerActions.SET_TIME_UNIT:\n      {\n        if (!canChangeValue(state.config)) {\n          return state;\n        }\n        /** @type {?} */\n\n\n        const _newTime = setTime(state.value, action.payload);\n\n        return Object.assign({}, state, {\n          value: _newTime\n        });\n      }\n\n    case TimepickerActions.UPDATE_CONTROLS:\n      {\n        /** @type {?} */\n        const _newControlsState = timepickerControls(state.value, action.payload);\n        /** @type {?} */\n\n\n        const _newState = {\n          value: state.value,\n          config: action.payload,\n          controls: _newControlsState\n        };\n\n        if (state.config.showMeridian !== _newState.config.showMeridian) {\n          if (state.value) {\n            _newState.value = new Date(state.value);\n          }\n        }\n\n        return Object.assign({}, state, _newState);\n      }\n\n    default:\n      return state;\n  }\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet TimepickerStore = /*#__PURE__*/(() => {\n  class TimepickerStore extends MiniStore {\n    constructor() {\n      /** @type {?} */\n      const _dispatcher = new BehaviorSubject({\n        type: '[mini-ngrx] dispatcher init'\n      });\n      /** @type {?} */\n\n\n      const state = new MiniState(initialState, _dispatcher, timepickerReducer);\n      super(_dispatcher, timepickerReducer, state);\n    }\n\n  }\n\n  TimepickerStore.ɵfac = function TimepickerStore_Factory(t) {\n    return new (t || TimepickerStore)();\n  };\n\n  TimepickerStore.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: TimepickerStore,\n    factory: TimepickerStore.ɵfac\n  });\n  /** @nocollapse */\n\n  return TimepickerStore;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst TIMEPICKER_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(() => TimepickerComponent),\n  multi: true\n};\nlet TimepickerComponent = /*#__PURE__*/(() => {\n  class TimepickerComponent {\n    /**\n     * @param {?} _config\n     * @param {?} _cd\n     * @param {?} _store\n     * @param {?} _timepickerActions\n     */\n    constructor(_config, _cd, _store, _timepickerActions) {\n      this._cd = _cd;\n      this._store = _store;\n      this._timepickerActions = _timepickerActions;\n      /**\n       * emits true if value is a valid date\n       */\n\n      this.isValid = new EventEmitter(); // min\\max validation for input fields\n\n      this.invalidHours = false;\n      this.invalidMinutes = false;\n      this.invalidSeconds = false; // control value accessor methods\n      // tslint:disable-next-line:no-any\n\n      this.onChange = Function.prototype; // tslint:disable-next-line:no-any\n\n      this.onTouched = Function.prototype;\n      Object.assign(this, _config);\n      this.timepickerSub = _store.select(state => state.value).subscribe(value => {\n        // update UI values if date changed\n        this._renderTime(value);\n\n        this.onChange(value);\n\n        this._store.dispatch(this._timepickerActions.updateControls(getControlsValue(this)));\n      });\n\n      _store.select(state => state.controls).subscribe(controlsState => {\n        this.isValid.emit(isInputValid(this.hours, this.minutes, this.seconds, this.isPM()));\n        Object.assign(this, controlsState);\n\n        _cd.markForCheck();\n      });\n    }\n    /**\n     * @deprecated - please use `isEditable` instead\n     * @return {?}\n     */\n\n\n    get isSpinnersVisible() {\n      return this.showSpinners && !this.readonlyInput;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get isEditable() {\n      return !(this.readonlyInput || this.disabled);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    resetValidation() {\n      this.invalidHours = false;\n      this.invalidMinutes = false;\n      this.invalidSeconds = false;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    isPM() {\n      return this.showMeridian && this.meridian === this.meridians[1];\n    }\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n\n\n    prevDef($event) {\n      $event.preventDefault();\n    }\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n\n\n    wheelSign($event) {\n      return Math.sign($event.deltaY) * -1;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n\n\n    ngOnChanges(changes) {\n      this._store.dispatch(this._timepickerActions.updateControls(getControlsValue(this)));\n    }\n    /**\n     * @param {?} step\n     * @param {?=} source\n     * @return {?}\n     */\n\n\n    changeHours(step, source = '') {\n      this.resetValidation();\n\n      this._store.dispatch(this._timepickerActions.changeHours({\n        step,\n        source\n      }));\n    }\n    /**\n     * @param {?} step\n     * @param {?=} source\n     * @return {?}\n     */\n\n\n    changeMinutes(step, source = '') {\n      this.resetValidation();\n\n      this._store.dispatch(this._timepickerActions.changeMinutes({\n        step,\n        source\n      }));\n    }\n    /**\n     * @param {?} step\n     * @param {?=} source\n     * @return {?}\n     */\n\n\n    changeSeconds(step, source = '') {\n      this.resetValidation();\n\n      this._store.dispatch(this._timepickerActions.changeSeconds({\n        step,\n        source\n      }));\n    }\n    /**\n     * @param {?} hours\n     * @return {?}\n     */\n\n\n    updateHours(hours) {\n      this.resetValidation();\n      this.hours = hours;\n      /** @type {?} */\n\n      const isValid = isHourInputValid(this.hours, this.isPM()) && this.isValidLimit();\n\n      if (!isValid) {\n        this.invalidHours = true;\n        this.isValid.emit(false);\n        this.onChange(null);\n        return;\n      }\n\n      this._updateTime();\n    }\n    /**\n     * @param {?} minutes\n     * @return {?}\n     */\n\n\n    updateMinutes(minutes) {\n      this.resetValidation();\n      this.minutes = minutes;\n      /** @type {?} */\n\n      const isValid = isMinuteInputValid(this.minutes) && this.isValidLimit();\n\n      if (!isValid) {\n        this.invalidMinutes = true;\n        this.isValid.emit(false);\n        this.onChange(null);\n        return;\n      }\n\n      this._updateTime();\n    }\n    /**\n     * @param {?} seconds\n     * @return {?}\n     */\n\n\n    updateSeconds(seconds) {\n      this.resetValidation();\n      this.seconds = seconds;\n      /** @type {?} */\n\n      const isValid = isSecondInputValid(this.seconds) && this.isValidLimit();\n\n      if (!isValid) {\n        this.invalidSeconds = true;\n        this.isValid.emit(false);\n        this.onChange(null);\n        return;\n      }\n\n      this._updateTime();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    isValidLimit() {\n      return isInputLimitValid({\n        hour: this.hours,\n        minute: this.minutes,\n        seconds: this.seconds,\n        isPM: this.isPM()\n      }, this.max, this.min);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    _updateTime() {\n      /** @type {?} */\n      const _seconds = this.showSeconds ? this.seconds : void 0;\n      /** @type {?} */\n\n\n      const _minutes = this.showMinutes ? this.minutes : void 0;\n\n      if (!isInputValid(this.hours, _minutes, _seconds, this.isPM())) {\n        this.isValid.emit(false);\n        this.onChange(null);\n        return;\n      }\n\n      this._store.dispatch(this._timepickerActions.setTime({\n        hour: this.hours,\n        minute: this.minutes,\n        seconds: this.seconds,\n        isPM: this.isPM()\n      }));\n    }\n    /**\n     * @return {?}\n     */\n\n\n    toggleMeridian() {\n      if (!this.showMeridian || !this.isEditable) {\n        return;\n      }\n      /** @type {?} */\n\n\n      const _hoursPerDayHalf = 12;\n\n      this._store.dispatch(this._timepickerActions.changeHours({\n        step: _hoursPerDayHalf,\n        source: ''\n      }));\n    }\n    /**\n     * Write a new value to the element.\n     * @param {?} obj\n     * @return {?}\n     */\n\n\n    writeValue(obj) {\n      if (isValidDate(obj)) {\n        this._store.dispatch(this._timepickerActions.writeValue(parseTime(obj)));\n      } else if (obj == null) {\n        this._store.dispatch(this._timepickerActions.writeValue(null));\n      }\n    }\n    /**\n     * Set the function to be called when the control receives a change event.\n     * @param {?} fn\n     * @return {?}\n     */\n    // tslint:disable-next-line:no-any\n\n\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    /**\n     * Set the function to be called when the control receives a touch event.\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /**\n     * This function is called when the control status changes to or from \"disabled\".\n     * Depending on the value, it will enable or disable the appropriate DOM element.\n     *\n     * @param {?} isDisabled\n     * @return {?}\n     */\n\n\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n\n      this._cd.markForCheck();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this.timepickerSub.unsubscribe();\n    }\n    /**\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    _renderTime(value) {\n      if (!isValidDate(value)) {\n        this.hours = '';\n        this.minutes = '';\n        this.seconds = '';\n        this.meridian = this.meridians[0];\n        return;\n      }\n      /** @type {?} */\n\n\n      const _value = parseTime(value);\n      /** @type {?} */\n\n\n      const _hoursPerDayHalf = 12;\n      /** @type {?} */\n\n      let _hours = _value.getHours();\n\n      if (this.showMeridian) {\n        this.meridian = this.meridians[_hours >= _hoursPerDayHalf ? 1 : 0];\n        _hours = _hours % _hoursPerDayHalf; // should be 12 PM, not 00 PM\n\n        if (_hours === 0) {\n          _hours = _hoursPerDayHalf;\n        }\n      }\n\n      this.hours = padNumber(_hours);\n      this.minutes = padNumber(_value.getMinutes());\n      this.seconds = padNumber(_value.getUTCSeconds());\n    }\n\n  }\n\n  TimepickerComponent.ɵfac = function TimepickerComponent_Factory(t) {\n    return new (t || TimepickerComponent)(ɵngcc0.ɵɵdirectiveInject(TimepickerConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(TimepickerStore), ɵngcc0.ɵɵdirectiveInject(TimepickerActions));\n  };\n\n  TimepickerComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: TimepickerComponent,\n    selectors: [[\"timepicker\"]],\n    inputs: {\n      disabled: \"disabled\",\n      hourStep: \"hourStep\",\n      minuteStep: \"minuteStep\",\n      secondsStep: \"secondsStep\",\n      readonlyInput: \"readonlyInput\",\n      mousewheel: \"mousewheel\",\n      arrowkeys: \"arrowkeys\",\n      showSpinners: \"showSpinners\",\n      showMeridian: \"showMeridian\",\n      showMinutes: \"showMinutes\",\n      showSeconds: \"showSeconds\",\n      meridians: \"meridians\",\n      min: \"min\",\n      max: \"max\"\n    },\n    outputs: {\n      isValid: \"isValid\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([TIMEPICKER_CONTROL_VALUE_ACCESSOR, TimepickerStore]), ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 31,\n    vars: 31,\n    consts: [[1, \"text-center\", 3, \"hidden\"], [1, \"btn\", \"btn-link\", 3, \"click\"], [1, \"bs-chevron\", \"bs-chevron-up\"], [4, \"ngIf\"], [1, \"form-group\"], [\"type\", \"text\", \"placeholder\", \"HH\", \"maxlength\", \"2\", 1, \"form-control\", \"text-center\", \"bs-timepicker-field\", 3, \"readonly\", \"disabled\", \"value\", \"wheel\", \"keydown.ArrowUp\", \"keydown.ArrowDown\", \"change\"], [\"class\", \"form-group\", 3, \"has-error\", 4, \"ngIf\"], [1, \"bs-chevron\", \"bs-chevron-down\"], [\"type\", \"text\", \"placeholder\", \"MM\", \"maxlength\", \"2\", 1, \"form-control\", \"text-center\", \"bs-timepicker-field\", 3, \"readonly\", \"disabled\", \"value\", \"wheel\", \"keydown.ArrowUp\", \"keydown.ArrowDown\", \"change\"], [\"type\", \"text\", \"placeholder\", \"SS\", \"maxlength\", \"2\", 1, \"form-control\", \"text-center\", \"bs-timepicker-field\", 3, \"readonly\", \"disabled\", \"value\", \"wheel\", \"keydown.ArrowUp\", \"keydown.ArrowDown\", \"change\"], [\"type\", \"button\", 1, \"btn\", \"btn-default\", \"text-center\", 3, \"disabled\", \"click\"]],\n    template: function TimepickerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"table\")(1, \"tbody\")(2, \"tr\", 0)(3, \"td\")(4, \"a\", 1);\n        ɵngcc0.ɵɵlistener(\"click\", function TimepickerComponent_Template_a_click_4_listener() {\n          return ctx.changeHours(ctx.hourStep);\n        });\n        ɵngcc0.ɵɵelement(5, \"span\", 2);\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵtemplate(6, TimepickerComponent_td_6_Template, 2, 0, \"td\", 3);\n        ɵngcc0.ɵɵtemplate(7, TimepickerComponent_td_7_Template, 3, 2, \"td\", 3);\n        ɵngcc0.ɵɵtemplate(8, TimepickerComponent_td_8_Template, 2, 0, \"td\", 3);\n        ɵngcc0.ɵɵtemplate(9, TimepickerComponent_td_9_Template, 3, 2, \"td\", 3);\n        ɵngcc0.ɵɵtemplate(10, TimepickerComponent_td_10_Template, 2, 0, \"td\", 3);\n        ɵngcc0.ɵɵtemplate(11, TimepickerComponent_td_11_Template, 1, 0, \"td\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(12, \"tr\")(13, \"td\", 4)(14, \"input\", 5);\n        ɵngcc0.ɵɵlistener(\"wheel\", function TimepickerComponent_Template_input_wheel_14_listener($event) {\n          ctx.prevDef($event);\n          return ctx.changeHours(ctx.hourStep * ctx.wheelSign($event), \"wheel\");\n        })(\"keydown.ArrowUp\", function TimepickerComponent_Template_input_keydown_ArrowUp_14_listener() {\n          return ctx.changeHours(ctx.hourStep, \"key\");\n        })(\"keydown.ArrowDown\", function TimepickerComponent_Template_input_keydown_ArrowDown_14_listener() {\n          return ctx.changeHours(-ctx.hourStep, \"key\");\n        })(\"change\", function TimepickerComponent_Template_input_change_14_listener($event) {\n          return ctx.updateHours($event.target.value);\n        });\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵtemplate(15, TimepickerComponent_td_15_Template, 2, 0, \"td\", 3);\n        ɵngcc0.ɵɵtemplate(16, TimepickerComponent_td_16_Template, 2, 7, \"td\", 6);\n        ɵngcc0.ɵɵtemplate(17, TimepickerComponent_td_17_Template, 2, 0, \"td\", 3);\n        ɵngcc0.ɵɵtemplate(18, TimepickerComponent_td_18_Template, 2, 7, \"td\", 6);\n        ɵngcc0.ɵɵtemplate(19, TimepickerComponent_td_19_Template, 2, 0, \"td\", 3);\n        ɵngcc0.ɵɵtemplate(20, TimepickerComponent_td_20_Template, 3, 4, \"td\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(21, \"tr\", 0)(22, \"td\")(23, \"a\", 1);\n        ɵngcc0.ɵɵlistener(\"click\", function TimepickerComponent_Template_a_click_23_listener() {\n          return ctx.changeHours(-ctx.hourStep);\n        });\n        ɵngcc0.ɵɵelement(24, \"span\", 7);\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵtemplate(25, TimepickerComponent_td_25_Template, 2, 0, \"td\", 3);\n        ɵngcc0.ɵɵtemplate(26, TimepickerComponent_td_26_Template, 3, 2, \"td\", 3);\n        ɵngcc0.ɵɵtemplate(27, TimepickerComponent_td_27_Template, 2, 0, \"td\", 3);\n        ɵngcc0.ɵɵtemplate(28, TimepickerComponent_td_28_Template, 3, 2, \"td\", 3);\n        ɵngcc0.ɵɵtemplate(29, TimepickerComponent_td_29_Template, 2, 0, \"td\", 3);\n        ɵngcc0.ɵɵtemplate(30, TimepickerComponent_td_30_Template, 1, 0, \"td\", 3);\n        ɵngcc0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"hidden\", !ctx.showSpinners);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"disabled\", !ctx.canIncrementHours || !ctx.isEditable);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showMinutes);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showMinutes);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showSeconds);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showSeconds);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showMeridian);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showMeridian);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"has-error\", ctx.invalidHours);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵclassProp(\"is-invalid\", ctx.invalidHours);\n        ɵngcc0.ɵɵproperty(\"readonly\", ctx.readonlyInput)(\"disabled\", ctx.disabled)(\"value\", ctx.hours);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showMinutes);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showMinutes);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showSeconds);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showSeconds);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showMeridian);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showMeridian);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"hidden\", !ctx.showSpinners);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"disabled\", !ctx.canDecrementHours || !ctx.isEditable);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showMinutes);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showMinutes);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showSeconds);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showSeconds);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showMeridian);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showMeridian);\n      }\n    },\n    directives: [ɵngcc1.NgIf],\n    styles: [\"\\n    .bs-chevron {\\n      border-style: solid;\\n      display: block;\\n      width: 9px;\\n      height: 9px;\\n      position: relative;\\n      border-width: 3px 0px 0 3px;\\n    }\\n\\n    .bs-chevron-up {\\n      -webkit-transform: rotate(45deg);\\n      transform: rotate(45deg);\\n      top: 2px;\\n    }\\n\\n    .bs-chevron-down {\\n      -webkit-transform: rotate(-135deg);\\n      transform: rotate(-135deg);\\n      top: -2px;\\n    }\\n\\n    .bs-timepicker-field {\\n      width: 50px;\\n    }\\n  \"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return TimepickerComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet TimepickerModule = /*#__PURE__*/(() => {\n  class TimepickerModule {\n    /**\n     * @return {?}\n     */\n    static forRoot() {\n      return {\n        ngModule: TimepickerModule,\n        providers: [TimepickerConfig, TimepickerActions, TimepickerStore]\n      };\n    }\n\n  }\n\n  TimepickerModule.ɵfac = function TimepickerModule_Factory(t) {\n    return new (t || TimepickerModule)();\n  };\n\n  TimepickerModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: TimepickerModule\n  });\n  TimepickerModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return TimepickerModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TimepickerModule, {\n    declarations: function () {\n      return [TimepickerComponent];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [TimepickerComponent];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { TimepickerComponent, TimepickerActions, TimepickerStore, TimepickerConfig, TimepickerModule, TIMEPICKER_CONTROL_VALUE_ACCESSOR as ɵa }; //# sourceMappingURL=ngx-bootstrap-timepicker.js.map","map":null,"metadata":{},"sourceType":"module"}