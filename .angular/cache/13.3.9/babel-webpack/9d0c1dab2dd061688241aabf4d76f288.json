{"ast":null,"code":"import { FormArray, FormControl } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../../projects/ngx-sortablejs/src/lib/sortablejs.directive\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\n\nfunction SortableFormArrayComponent_li_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 6);\n    i0.ɵɵelement(1, \"input\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const city_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formControl\", city_r1);\n  }\n}\n\nexport let SortableFormArrayComponent = /*#__PURE__*/(() => {\n  class SortableFormArrayComponent {\n    constructor() {\n      this.citiesControls = new FormArray(['Ankara', 'Moscow', 'Munich', 'Paris', 'Washington'].map(city => new FormControl(city)));\n    }\n\n  }\n\n  SortableFormArrayComponent.ɵfac = function SortableFormArrayComponent_Factory(t) {\n    return new (t || SortableFormArrayComponent)();\n  };\n\n  SortableFormArrayComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SortableFormArrayComponent,\n    selectors: [[\"app-sortable-form-array\"]],\n    decls: 20,\n    vars: 5,\n    consts: [[1, \"lead\"], [\"href\", \"https://github.com/SortableJS/ngx-sortablejs/tree/master/src/app/examples/sortable-form-array\", \"target\", \"_blank\"], [1, \"list-group\", 3, \"sortablejs\"], [\"class\", \"list-group-item\", 4, \"ngFor\", \"ngForOf\"], [1, \"my-3\"], [1, \"alert\", \"alert-dark\"], [1, \"list-group-item\"], [1, \"form-control\", 3, \"formControl\"]],\n    template: function SortableFormArrayComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h1\");\n        i0.ɵɵtext(1, \"Sortable Array\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"p\", 0)(3, \"strong\")(4, \"a\", 1);\n        i0.ɵɵtext(5, \"The source code\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"p\");\n        i0.ɵɵtext(7, \" Most of the time one wants to sort something more than just data. Complex forms with \");\n        i0.ɵɵelementStart(8, \"em\");\n        i0.ɵɵtext(9, \"FormArray\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(10, \" controls are also supported.\\n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"p\");\n        i0.ɵɵtext(12, \"Try to change the text and reorder the inputs\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"ul\", 2);\n        i0.ɵɵtemplate(14, SortableFormArrayComponent_li_14_Template, 2, 1, \"li\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"p\", 4);\n        i0.ɵɵtext(16, \"The actual value of the array\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"div\", 5);\n        i0.ɵɵtext(18);\n        i0.ɵɵpipe(19, \"json\");\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(13);\n        i0.ɵɵproperty(\"sortablejs\", ctx.citiesControls);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.citiesControls.controls);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\" > \", i0.ɵɵpipeBind1(19, 3, ctx.citiesControls.value), \"\\n\");\n      }\n    },\n    directives: [i1.SortablejsDirective, i2.NgForOf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.FormControlDirective],\n    pipes: [i2.JsonPipe],\n    styles: [\"\"]\n  });\n  return SortableFormArrayComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}