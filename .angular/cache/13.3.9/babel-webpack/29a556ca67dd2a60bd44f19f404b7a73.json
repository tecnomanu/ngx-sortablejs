{"ast":null,"code":"import { filter } from 'rxjs/operators';\nimport { isBs3 } from 'ngx-bootstrap/utils';\nimport { Injectable, EventEmitter, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, Renderer2, Directive, Input, Output, ViewContainerRef, TemplateRef, HostBinding, HostListener, NgModule } from '@angular/core';\nimport { ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';\nimport { PositioningService } from 'ngx-bootstrap/positioning';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Default dropdown configuration\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from 'ngx-bootstrap/component-loader';\nconst _c0 = [\"*\"];\nlet BsDropdownConfig = /*#__PURE__*/(() => {\n  class BsDropdownConfig {\n    constructor() {\n      /**\n       * default dropdown auto closing behavior\n       */\n      this.autoClose = true;\n      /**\n       * default dropdown auto closing behavior\n       */\n\n      this.insideClick = false;\n    }\n\n  }\n\n  BsDropdownConfig.ɵfac = function BsDropdownConfig_Factory(t) {\n    return new (t || BsDropdownConfig)();\n  };\n\n  BsDropdownConfig.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: BsDropdownConfig,\n    factory: BsDropdownConfig.ɵfac\n  });\n  return BsDropdownConfig;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet BsDropdownState = /*#__PURE__*/(() => {\n  class BsDropdownState {\n    constructor() {\n      this.direction = 'down';\n      this.isOpenChange = new EventEmitter();\n      this.isDisabledChange = new EventEmitter();\n      this.toggleClick = new EventEmitter();\n      this.dropdownMenu = new Promise(resolve => {\n        this.resolveDropdownMenu = resolve;\n      });\n    }\n\n  }\n\n  BsDropdownState.ɵfac = function BsDropdownState_Factory(t) {\n    return new (t || BsDropdownState)();\n  };\n\n  BsDropdownState.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: BsDropdownState,\n    factory: BsDropdownState.ɵfac\n  });\n  /** @nocollapse */\n\n  return BsDropdownState;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet BsDropdownContainerComponent = /*#__PURE__*/(() => {\n  class BsDropdownContainerComponent {\n    /**\n     * @param {?} _state\n     * @param {?} cd\n     * @param {?} _renderer\n     * @param {?} _element\n     */\n    constructor(_state, cd, _renderer, _element) {\n      this._state = _state;\n      this.cd = cd;\n      this._renderer = _renderer;\n      this._element = _element;\n      this.isOpen = false;\n      this._subscription = _state.isOpenChange.subscribe(value => {\n        this.isOpen = value;\n        /** @type {?} */\n\n        const dropdown = this._element.nativeElement.querySelector('.dropdown-menu');\n\n        if (dropdown && !isBs3()) {\n          this._renderer.addClass(dropdown, 'show');\n\n          if (dropdown.classList.contains('dropdown-menu-right')) {\n            this._renderer.setStyle(dropdown, 'left', 'auto');\n\n            this._renderer.setStyle(dropdown, 'right', '0');\n          }\n\n          if (this.direction === 'up') {\n            this._renderer.setStyle(dropdown, 'top', 'auto');\n\n            this._renderer.setStyle(dropdown, 'transform', 'translateY(-101%)');\n          }\n        }\n\n        this.cd.markForCheck();\n        this.cd.detectChanges();\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get direction() {\n      return this._state.direction;\n    }\n    /**\n     * \\@internal\n     * @param {?} el\n     * @return {?}\n     */\n\n\n    _contains(el) {\n      return this._element.nativeElement.contains(el);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this._subscription.unsubscribe();\n    }\n\n  }\n\n  BsDropdownContainerComponent.ɵfac = function BsDropdownContainerComponent_Factory(t) {\n    return new (t || BsDropdownContainerComponent)(ɵngcc0.ɵɵdirectiveInject(BsDropdownState), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  BsDropdownContainerComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: BsDropdownContainerComponent,\n    selectors: [[\"bs-dropdown-container\"]],\n    hostAttrs: [2, \"display\", \"block\", \"position\", \"absolute\"],\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 8,\n    template: function BsDropdownContainerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\");\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"dropup\", ctx.direction === \"up\")(\"dropdown\", ctx.direction === \"down\")(\"show\", ctx.isOpen)(\"open\", ctx.isOpen);\n      }\n    },\n    directives: function () {\n      return [BsDropdownDirective];\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  /** @nocollapse */\n\n  return BsDropdownContainerComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet BsDropdownDirective = /*#__PURE__*/(() => {\n  class BsDropdownDirective {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _renderer\n     * @param {?} _viewContainerRef\n     * @param {?} _cis\n     * @param {?} _config\n     * @param {?} _state\n     */\n    constructor(_elementRef, _renderer, _viewContainerRef, _cis, _config, _state) {\n      this._elementRef = _elementRef;\n      this._renderer = _renderer;\n      this._viewContainerRef = _viewContainerRef;\n      this._cis = _cis;\n      this._config = _config;\n      this._state = _state; // todo: move to component loader\n\n      this._isInlineOpen = false;\n      this._subscriptions = [];\n      this._isInited = false; // set initial dropdown state from config\n\n      this._state.autoClose = this._config.autoClose;\n      this._state.insideClick = this._config.insideClick; // create dropdown component loader\n\n      this._dropdown = this._cis.createLoader(this._elementRef, this._viewContainerRef, this._renderer).provide({\n        provide: BsDropdownState,\n        useValue: this._state\n      });\n      this.onShown = this._dropdown.onShown;\n      this.onHidden = this._dropdown.onHidden;\n      this.isOpenChange = this._state.isOpenChange;\n    }\n    /**\n     * Indicates that dropdown will be closed on item or document click,\n     * and after pressing ESC\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set autoClose(value) {\n      this._state.autoClose = value;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get autoClose() {\n      return this._state.autoClose;\n    }\n    /**\n     * This attribute indicates that the dropdown shouldn't close on inside click when autoClose is set to true\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set insideClick(value) {\n      this._state.insideClick = value;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get insideClick() {\n      return this._state.insideClick;\n    }\n    /**\n     * Disables dropdown toggle and hides dropdown menu if opened\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set isDisabled(value) {\n      this._isDisabled = value;\n\n      this._state.isDisabledChange.emit(value);\n\n      if (value) {\n        this.hide();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get isDisabled() {\n      return this._isDisabled;\n    }\n    /**\n     * Returns whether or not the popover is currently being shown\n     * @return {?}\n     */\n\n\n    get isOpen() {\n      if (this._showInline) {\n        return this._isInlineOpen;\n      }\n\n      return this._dropdown.isShown;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set isOpen(value) {\n      if (value) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get isBs4() {\n      return !isBs3();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    get _showInline() {\n      return !this.container;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      // fix: seems there are an issue with `routerLinkActive`\n      // which result in duplicated call ngOnInit without call to ngOnDestroy\n      // read more: https://github.com/valor-software/ngx-bootstrap/issues/1885\n      if (this._isInited) {\n        return;\n      }\n\n      this._isInited = true; // attach DOM listeners\n\n      this._dropdown.listen({\n        // because of dropdown inline mode\n        outsideClick: false,\n        triggers: this.triggers,\n        show: () => this.show()\n      }); // toggle visibility on toggle element click\n\n\n      this._subscriptions.push(this._state.toggleClick.subscribe(value => this.toggle(value))); // hide dropdown if set disabled while opened\n\n\n      this._subscriptions.push(this._state.isDisabledChange.pipe(filter(value => value)).subscribe(value => this.hide()));\n    }\n    /**\n     * Opens an element’s popover. This is considered a “manual” triggering of\n     * the popover.\n     * @return {?}\n     */\n\n\n    show() {\n      if (this.isOpen || this.isDisabled) {\n        return;\n      }\n\n      if (this._showInline) {\n        if (!this._inlinedMenu) {\n          this._state.dropdownMenu.then(dropdownMenu => {\n            this._dropdown.attachInline(dropdownMenu.viewContainer, dropdownMenu.templateRef);\n\n            this._inlinedMenu = this._dropdown._inlineViewRef;\n            this.addBs4Polyfills();\n          }) // swallow errors\n          .catch();\n        }\n\n        this.addBs4Polyfills();\n        this._isInlineOpen = true;\n        this.onShown.emit(true);\n\n        this._state.isOpenChange.emit(true);\n\n        return;\n      }\n\n      this._state.dropdownMenu.then(dropdownMenu => {\n        // check direction in which dropdown should be opened\n\n        /** @type {?} */\n        const _dropup = this.dropup || typeof this.dropup !== 'undefined' && this.dropup;\n\n        this._state.direction = _dropup ? 'up' : 'down';\n        /** @type {?} */\n\n        const _placement = this.placement || (_dropup ? 'top start' : 'bottom start'); // show dropdown\n\n\n        this._dropdown.attach(BsDropdownContainerComponent).to(this.container).position({\n          attachment: _placement\n        }).show({\n          content: dropdownMenu.templateRef,\n          placement: _placement\n        });\n\n        this._state.isOpenChange.emit(true);\n      }) // swallow error\n      .catch();\n    }\n    /**\n     * Closes an element’s popover. This is considered a “manual” triggering of\n     * the popover.\n     * @return {?}\n     */\n\n\n    hide() {\n      if (!this.isOpen) {\n        return;\n      }\n\n      if (this._showInline) {\n        this.removeShowClass();\n        this.removeDropupStyles();\n        this._isInlineOpen = false;\n        this.onHidden.emit(true);\n      } else {\n        this._dropdown.hide();\n      }\n\n      this._state.isOpenChange.emit(false);\n    }\n    /**\n     * Toggles an element’s popover. This is considered a “manual” triggering of\n     * the popover. With parameter <code>true</code> allows toggling, with parameter <code>false</code>\n     * only hides opened dropdown. Parameter usage will be removed in ngx-bootstrap v3\n     * @param {?=} value\n     * @return {?}\n     */\n\n\n    toggle(value) {\n      if (this.isOpen || !value) {\n        return this.hide();\n      }\n\n      return this.show();\n    }\n    /**\n     * \\@internal\n     * @param {?} event\n     * @return {?}\n     */\n\n\n    _contains(event) {\n      return this._elementRef.nativeElement.contains(event.target) || this._dropdown.instance && this._dropdown.instance._contains(event.target);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      // clean up subscriptions and destroy dropdown\n      for (const sub of this._subscriptions) {\n        sub.unsubscribe();\n      }\n\n      this._dropdown.dispose();\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    addBs4Polyfills() {\n      if (!isBs3()) {\n        this.addShowClass();\n        this.checkRightAlignment();\n        this.addDropupStyles();\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    addShowClass() {\n      if (this._inlinedMenu && this._inlinedMenu.rootNodes[0]) {\n        this._renderer.addClass(this._inlinedMenu.rootNodes[0], 'show');\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    removeShowClass() {\n      if (this._inlinedMenu && this._inlinedMenu.rootNodes[0]) {\n        this._renderer.removeClass(this._inlinedMenu.rootNodes[0], 'show');\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    checkRightAlignment() {\n      if (this._inlinedMenu && this._inlinedMenu.rootNodes[0]) {\n        /** @type {?} */\n        const isRightAligned = this._inlinedMenu.rootNodes[0].classList.contains('dropdown-menu-right');\n\n        this._renderer.setStyle(this._inlinedMenu.rootNodes[0], 'left', isRightAligned ? 'auto' : '0');\n\n        this._renderer.setStyle(this._inlinedMenu.rootNodes[0], 'right', isRightAligned ? '0' : 'auto');\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    addDropupStyles() {\n      if (this._inlinedMenu && this._inlinedMenu.rootNodes[0]) {\n        // a little hack to not break support of bootstrap 4 beta\n        this._renderer.setStyle(this._inlinedMenu.rootNodes[0], 'top', this.dropup ? 'auto' : '100%');\n\n        this._renderer.setStyle(this._inlinedMenu.rootNodes[0], 'transform', this.dropup ? 'translateY(-101%)' : 'translateY(0)');\n\n        this._renderer.setStyle(this._inlinedMenu.rootNodes[0], 'bottom', 'auto');\n      }\n    }\n    /**\n     * @private\n     * @return {?}\n     */\n\n\n    removeDropupStyles() {\n      if (this._inlinedMenu && this._inlinedMenu.rootNodes[0]) {\n        this._renderer.removeStyle(this._inlinedMenu.rootNodes[0], 'top');\n\n        this._renderer.removeStyle(this._inlinedMenu.rootNodes[0], 'transform');\n\n        this._renderer.removeStyle(this._inlinedMenu.rootNodes[0], 'bottom');\n      }\n    }\n\n  }\n\n  BsDropdownDirective.ɵfac = function BsDropdownDirective_Factory(t) {\n    return new (t || BsDropdownDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ComponentLoaderFactory), ɵngcc0.ɵɵdirectiveInject(BsDropdownConfig), ɵngcc0.ɵɵdirectiveInject(BsDropdownState));\n  };\n\n  BsDropdownDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: BsDropdownDirective,\n    selectors: [[\"\", \"bsDropdown\", \"\"], [\"\", \"dropdown\", \"\"]],\n    hostVars: 6,\n    hostBindings: function BsDropdownDirective_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"dropup\", ctx.dropup)(\"open\", ctx.isOpen)(\"show\", ctx.isOpen && ctx.isBs4);\n      }\n    },\n    inputs: {\n      autoClose: \"autoClose\",\n      insideClick: \"insideClick\",\n      isDisabled: \"isDisabled\",\n      isOpen: \"isOpen\",\n      placement: \"placement\",\n      triggers: \"triggers\",\n      container: \"container\",\n      dropup: \"dropup\"\n    },\n    outputs: {\n      onShown: \"onShown\",\n      onHidden: \"onHidden\",\n      isOpenChange: \"isOpenChange\"\n    },\n    exportAs: [\"bs-dropdown\"],\n    features: [ɵngcc0.ɵɵProvidersFeature([BsDropdownState])]\n  });\n  /** @nocollapse */\n\n  return BsDropdownDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet BsDropdownMenuDirective = /*#__PURE__*/(() => {\n  class BsDropdownMenuDirective {\n    // tslint:disable:no-any\n\n    /**\n     * @param {?} _state\n     * @param {?} _viewContainer\n     * @param {?} _templateRef\n     */\n    constructor(_state, _viewContainer, _templateRef) {\n      _state.resolveDropdownMenu({\n        templateRef: _templateRef,\n        viewContainer: _viewContainer\n      });\n    }\n\n  }\n\n  BsDropdownMenuDirective.ɵfac = function BsDropdownMenuDirective_Factory(t) {\n    return new (t || BsDropdownMenuDirective)(ɵngcc0.ɵɵdirectiveInject(BsDropdownState), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n  };\n\n  BsDropdownMenuDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: BsDropdownMenuDirective,\n    selectors: [[\"\", \"bsDropdownMenu\", \"\"], [\"\", \"dropdownMenu\", \"\"]],\n    exportAs: [\"bs-dropdown-menu\"]\n  });\n  /** @nocollapse */\n\n  return BsDropdownMenuDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet BsDropdownToggleDirective = /*#__PURE__*/(() => {\n  class BsDropdownToggleDirective {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _dropdown\n     * @param {?} _element\n     * @param {?} _renderer\n     * @param {?} _state\n     */\n    constructor(_changeDetectorRef, _dropdown, _element, _renderer, _state) {\n      this._changeDetectorRef = _changeDetectorRef;\n      this._dropdown = _dropdown;\n      this._element = _element;\n      this._renderer = _renderer;\n      this._state = _state;\n      this.isDisabled = null;\n      this._subscriptions = []; // sync is open value with state\n\n      this._subscriptions.push(this._state.isOpenChange.subscribe(value => {\n        this.isOpen = value;\n\n        if (value) {\n          this._documentClickListener = this._renderer.listen('document', 'click', event => {\n            if (this._state.autoClose && event.button !== 2 && !this._element.nativeElement.contains(event.target) && !(this._state.insideClick && this._dropdown._contains(event))) {\n              this._state.toggleClick.emit(false);\n\n              this._changeDetectorRef.detectChanges();\n            }\n          });\n          this._escKeyUpListener = this._renderer.listen(this._element.nativeElement, 'keyup.esc', () => {\n            if (this._state.autoClose) {\n              this._state.toggleClick.emit(false);\n\n              this._changeDetectorRef.detectChanges();\n            }\n          });\n        } else {\n          this._documentClickListener();\n\n          this._escKeyUpListener();\n        }\n      })); // populate disabled state\n\n\n      this._subscriptions.push(this._state.isDisabledChange.subscribe(value => this.isDisabled = value || null));\n    }\n    /**\n     * @return {?}\n     */\n\n\n    onClick() {\n      if (this.isDisabled) {\n        return;\n      }\n\n      this._state.toggleClick.emit(true);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      if (this._documentClickListener) {\n        this._documentClickListener();\n      }\n\n      if (this._escKeyUpListener) {\n        this._escKeyUpListener();\n      }\n\n      for (const sub of this._subscriptions) {\n        sub.unsubscribe();\n      }\n    }\n\n  }\n\n  BsDropdownToggleDirective.ɵfac = function BsDropdownToggleDirective_Factory(t) {\n    return new (t || BsDropdownToggleDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(BsDropdownDirective), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(BsDropdownState));\n  };\n\n  BsDropdownToggleDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: BsDropdownToggleDirective,\n    selectors: [[\"\", \"bsDropdownToggle\", \"\"], [\"\", \"dropdownToggle\", \"\"]],\n    hostVars: 3,\n    hostBindings: function BsDropdownToggleDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function BsDropdownToggleDirective_click_HostBindingHandler() {\n          return ctx.onClick();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-haspopup\", true)(\"disabled\", ctx.isDisabled)(\"aria-expanded\", ctx.isOpen);\n      }\n    },\n    exportAs: [\"bs-dropdown-toggle\"]\n  });\n  /** @nocollapse */\n\n  return BsDropdownToggleDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet BsDropdownModule = /*#__PURE__*/(() => {\n  class BsDropdownModule {\n    // tslint:disable-next-line:no-any\n\n    /**\n     * @param {?=} config\n     * @return {?}\n     */\n    static forRoot(config) {\n      return {\n        ngModule: BsDropdownModule,\n        providers: [ComponentLoaderFactory, PositioningService, BsDropdownState, {\n          provide: BsDropdownConfig,\n          useValue: config ? config : {\n            autoClose: true,\n            insideClick: false\n          }\n        }]\n      };\n    }\n\n  }\n\n  BsDropdownModule.ɵfac = function BsDropdownModule_Factory(t) {\n    return new (t || BsDropdownModule)();\n  };\n\n  BsDropdownModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: BsDropdownModule\n  });\n  BsDropdownModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return BsDropdownModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BsDropdownModule, {\n    declarations: [BsDropdownMenuDirective, BsDropdownToggleDirective, BsDropdownContainerComponent, BsDropdownDirective],\n    exports: [BsDropdownMenuDirective, BsDropdownToggleDirective, BsDropdownDirective]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { BsDropdownDirective, BsDropdownMenuDirective, BsDropdownToggleDirective, BsDropdownContainerComponent, BsDropdownState, BsDropdownConfig, BsDropdownModule }; //# sourceMappingURL=ngx-bootstrap-dropdown.js.map","map":null,"metadata":{},"sourceType":"module"}