{"ast":null,"code":"import { isBs3 } from 'ngx-bootstrap/utils';\nimport { CommonModule } from '@angular/common';\nimport { Injectable, Component, HostBinding, Input, Host, NgModule } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction ProgressbarComponent_bar_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"bar\", 2);\n    ɵngcc0.ɵɵprojection(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"type\", ctx_r0.type)(\"value\", ctx_r0._value);\n  }\n}\n\nfunction ProgressbarComponent_ng_template_1_bar_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"bar\", 2);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r3 = ctx.$implicit;\n    ɵngcc0.ɵɵproperty(\"type\", item_r3.type)(\"value\", item_r3.value);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(item_r3.label);\n  }\n}\n\nfunction ProgressbarComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, ProgressbarComponent_ng_template_1_bar_0_Template, 2, 3, \"bar\", 3);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r1._value);\n  }\n}\n\nconst _c0 = [\"*\"];\nlet ProgressbarConfig = /*#__PURE__*/(() => {\n  class ProgressbarConfig {\n    constructor() {\n      /**\n       * if `true` changing value of progress bar will be animated\n       */\n      this.animate = false;\n      /**\n       * maximum total value of progress element\n       */\n\n      this.max = 100;\n    }\n\n  }\n\n  ProgressbarConfig.ɵfac = function ProgressbarConfig_Factory(t) {\n    return new (t || ProgressbarConfig)();\n  };\n\n  ProgressbarConfig.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: ProgressbarConfig,\n    factory: ProgressbarConfig.ɵfac\n  });\n  return ProgressbarConfig;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet ProgressbarComponent = /*#__PURE__*/(() => {\n  class ProgressbarComponent {\n    /**\n     * @param {?} config\n     */\n    constructor(config) {\n      this.isStacked = false;\n      this.addClass = true;\n      /* tslint:disable-next-line:no-any */\n\n      this.bars = [];\n      this._max = 100;\n      Object.assign(this, config);\n    }\n    /**\n     * if `true` changing value of progress bar will be animated\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set animate(value) {\n      this._animate = value;\n      this.bars.forEach(b => {\n        b.animate = value;\n      });\n    }\n    /**\n     * If `true`, striped classes are applied\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set striped(value) {\n      this._striped = value;\n      this.bars.forEach(b => {\n        b.striped = value;\n      });\n    }\n    /**\n     * current value of progress bar. Could be a number or array of objects\n     * like {\"value\":15,\"type\":\"info\",\"label\":\"15 %\"}\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set value(value) {\n      this.isStacked = Array.isArray(value);\n      this._value = value;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get isBs3() {\n      return isBs3();\n    }\n    /**\n     * maximum total value of progress element\n     * @return {?}\n     */\n\n\n    get max() {\n      return this._max;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n\n\n    set max(v) {\n      this._max = v;\n      this.bars.forEach(bar => {\n        bar.recalculatePercentage();\n      });\n    }\n    /**\n     * @param {?} bar\n     * @return {?}\n     */\n\n\n    addBar(bar) {\n      bar.animate = this._animate;\n      bar.striped = this._striped;\n      this.bars.push(bar);\n    }\n    /**\n     * @param {?} bar\n     * @return {?}\n     */\n\n\n    removeBar(bar) {\n      this.bars.splice(this.bars.indexOf(bar), 1);\n    }\n\n  }\n\n  ProgressbarComponent.ɵfac = function ProgressbarComponent_Factory(t) {\n    return new (t || ProgressbarComponent)(ɵngcc0.ɵɵdirectiveInject(ProgressbarConfig));\n  };\n\n  ProgressbarComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ProgressbarComponent,\n    selectors: [[\"progressbar\"]],\n    hostVars: 3,\n    hostBindings: function ProgressbarComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"max\", ctx.max);\n        ɵngcc0.ɵɵclassProp(\"progress\", ctx.addClass);\n      }\n    },\n    inputs: {\n      animate: \"animate\",\n      striped: \"striped\",\n      value: \"value\",\n      max: \"max\",\n      type: \"type\"\n    },\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 2,\n    consts: [[3, \"type\", \"value\", 4, \"ngIf\"], [3, \"ngIf\"], [3, \"type\", \"value\"], [3, \"type\", \"value\", 4, \"ngFor\", \"ngForOf\"]],\n    template: function ProgressbarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, ProgressbarComponent_bar_0_Template, 2, 2, \"bar\", 0);\n        ɵngcc0.ɵɵtemplate(1, ProgressbarComponent_ng_template_1_Template, 1, 1, \"ng-template\", 1);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.isStacked);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.isStacked);\n      }\n    },\n    directives: function () {\n      return [ɵngcc1.NgIf, BarComponent, ɵngcc1.NgForOf];\n    },\n    styles: [\"[_nghost-%COMP%] {\\n      width: 100%;\\n      display: flex;\\n    }\"]\n  });\n  /** @nocollapse */\n\n  return ProgressbarComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// todo: number pipe\n// todo: use query from progress?\n\n\nlet BarComponent = /*#__PURE__*/(() => {\n  class BarComponent {\n    /**\n     * @param {?} progress\n     */\n    constructor(progress) {\n      this.percent = 0;\n      this.progress = progress;\n    }\n    /**\n     * current value of progress bar\n     * @return {?}\n     */\n\n\n    get value() {\n      return this._value;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n\n\n    set value(v) {\n      if (!v && v !== 0) {\n        return;\n      }\n\n      this._value = v;\n      this.recalculatePercentage();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get setBarWidth() {\n      this.recalculatePercentage();\n      return this.percent;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get isBs3() {\n      return isBs3();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      this.progress.addBar(this);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this.progress.removeBar(this);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    recalculatePercentage() {\n      this.percent = +(this.value / this.progress.max * 100).toFixed(2);\n      /** @type {?} */\n\n      const totalPercentage = this.progress.bars.reduce(function (total, bar) {\n        return total + bar.percent;\n      }, 0);\n\n      if (totalPercentage > 100) {\n        this.percent -= totalPercentage - 100;\n      }\n    }\n\n  }\n\n  BarComponent.ɵfac = function BarComponent_Factory(t) {\n    return new (t || BarComponent)(ɵngcc0.ɵɵdirectiveInject(ProgressbarComponent, 1));\n  };\n\n  BarComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: BarComponent,\n    selectors: [[\"bar\"]],\n    hostAttrs: [\"role\", \"progressbar\", \"aria-valuemin\", \"0\"],\n    hostVars: 15,\n    hostBindings: function BarComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-valuenow\", ctx.value)(\"aria-valuetext\", ctx.percent ? ctx.percent.toFixed(0) + \"%\" : \"\")(\"aria-valuemax\", ctx.max);\n        ɵngcc0.ɵɵclassMap(\"progress-bar \" + (ctx.type ? \"progress-bar-\" + ctx.type + \" bg-\" + ctx.type : \"\"));\n        ɵngcc0.ɵɵstyleProp(\"height\", \"100\", \"%\")(\"width\", ctx.setBarWidth, \"%\");\n        ɵngcc0.ɵɵclassProp(\"progress-bar-animated\", !ctx.isBs3 && ctx.animate)(\"progress-bar-striped\", ctx.striped)(\"active\", ctx.isBs3 && ctx.animate);\n      }\n    },\n    inputs: {\n      value: \"value\",\n      type: \"type\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function BarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  /** @nocollapse */\n\n  return BarComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet ProgressbarModule = /*#__PURE__*/(() => {\n  class ProgressbarModule {\n    /**\n     * @return {?}\n     */\n    static forRoot() {\n      return {\n        ngModule: ProgressbarModule,\n        providers: [ProgressbarConfig]\n      };\n    }\n\n  }\n\n  ProgressbarModule.ɵfac = function ProgressbarModule_Factory(t) {\n    return new (t || ProgressbarModule)();\n  };\n\n  ProgressbarModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ProgressbarModule\n  });\n  ProgressbarModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return ProgressbarModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ProgressbarModule, {\n    declarations: function () {\n      return [BarComponent, ProgressbarComponent];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [BarComponent, ProgressbarComponent];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { BarComponent, ProgressbarComponent, ProgressbarModule, ProgressbarConfig }; //# sourceMappingURL=ngx-bootstrap-progressbar.js.map","map":null,"metadata":{},"sourceType":"module"}