{"ast":null,"code":"import { animate, style, AnimationBuilder } from '@angular/animations';\nimport { Directive, ElementRef, EventEmitter, HostBinding, Input, Output, Renderer2, NgModule } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/animations';\nconst COLLAPSE_ANIMATION_TIMING = '400ms cubic-bezier(0.4,0.0,0.2,1)';\n/** @type {?} */\n\nconst expandAnimation = [style({\n  height: 0,\n  visibility: 'hidden'\n}), animate(COLLAPSE_ANIMATION_TIMING, style({\n  height: '*',\n  visibility: 'visible'\n}))];\n/** @type {?} */\n\nconst collapseAnimation = [style({\n  height: '*',\n  visibility: 'visible'\n}), animate(COLLAPSE_ANIMATION_TIMING, style({\n  height: 0,\n  visibility: 'hidden'\n}))];\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nlet CollapseDirective = /*#__PURE__*/(() => {\n  class CollapseDirective {\n    /**\n     * @param {?} _el\n     * @param {?} _renderer\n     * @param {?} _builder\n     */\n    constructor(_el, _renderer, _builder) {\n      this._el = _el;\n      this._renderer = _renderer;\n      /**\n       * This event fires as soon as content collapses\n       */\n\n      this.collapsed = new EventEmitter();\n      /**\n       * This event fires when collapsing is started\n       */\n\n      this.collapses = new EventEmitter();\n      /**\n       * This event fires as soon as content becomes visible\n       */\n\n      this.expanded = new EventEmitter();\n      /**\n       * This event fires when expansion is started\n       */\n\n      this.expands = new EventEmitter(); // shown\n\n      this.isExpanded = true; // hidden\n\n      this.isCollapsed = false; // stale state\n\n      this.isCollapse = true; // animation state\n\n      this.isCollapsing = false;\n      /**\n       * turn on/off animation\n       */\n\n      this.isAnimated = false;\n      this._display = 'block';\n      this._stylesLoaded = false;\n      this._COLLAPSE_ACTION_NAME = 'collapse';\n      this._EXPAND_ACTION_NAME = 'expand';\n      this._factoryCollapseAnimation = _builder.build(collapseAnimation);\n      this._factoryExpandAnimation = _builder.build(expandAnimation);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set display(value) {\n      if (!this.isAnimated) {\n        this._renderer.setStyle(this._el.nativeElement, 'display', value);\n\n        return;\n      }\n\n      this._display = value;\n\n      if (value === 'none') {\n        this.hide();\n        return;\n      }\n\n      this.show();\n    }\n    /**\n     * A flag indicating visibility of content (shown or hidden)\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set collapse(value) {\n      this.isExpanded = value;\n      this.toggle();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get collapse() {\n      return this.isExpanded;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngAfterViewChecked() {\n      this._stylesLoaded = true;\n    }\n    /**\n     * allows to manually toggle content visibility\n     * @return {?}\n     */\n\n\n    toggle() {\n      if (this.isExpanded) {\n        this.hide();\n      } else {\n        this.show();\n      }\n    }\n    /**\n     * allows to manually hide content\n     * @return {?}\n     */\n\n\n    hide() {\n      this.isCollapsing = true;\n      this.isExpanded = false;\n      this.isCollapsed = true;\n      this.isCollapsing = false;\n      this.collapses.emit(this);\n      this.animationRun(this.isAnimated, this._COLLAPSE_ACTION_NAME)(() => {\n        this.collapsed.emit(this);\n\n        this._renderer.setStyle(this._el.nativeElement, 'display', 'none');\n      });\n    }\n    /**\n     * allows to manually show collapsed content\n     * @return {?}\n     */\n\n\n    show() {\n      this._renderer.setStyle(this._el.nativeElement, 'display', this._display);\n\n      this.isCollapsing = true;\n      this.isExpanded = true;\n      this.isCollapsed = false;\n      this.isCollapsing = false;\n      this.expands.emit(this);\n      this.animationRun(this.isAnimated, this._EXPAND_ACTION_NAME)(() => {\n        this.expanded.emit(this);\n      });\n    }\n    /**\n     * @param {?} isAnimated\n     * @param {?} action\n     * @return {?}\n     */\n\n\n    animationRun(isAnimated, action) {\n      if (!isAnimated || !this._stylesLoaded) {\n        return callback => callback();\n      }\n\n      this._renderer.setStyle(this._el.nativeElement, 'overflow', 'hidden');\n\n      this._renderer.addClass(this._el.nativeElement, 'collapse');\n      /** @type {?} */\n\n\n      const factoryAnimation = action === this._EXPAND_ACTION_NAME ? this._factoryExpandAnimation : this._factoryCollapseAnimation;\n\n      if (this._player) {\n        this._player.destroy();\n      }\n\n      this._player = factoryAnimation.create(this._el.nativeElement);\n\n      this._player.play();\n\n      return callback => this._player.onDone(callback);\n    }\n\n  }\n\n  CollapseDirective.ɵfac = function CollapseDirective_Factory(t) {\n    return new (t || CollapseDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AnimationBuilder));\n  };\n\n  CollapseDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CollapseDirective,\n    selectors: [[\"\", \"collapse\", \"\"]],\n    hostVars: 10,\n    hostBindings: function CollapseDirective_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpanded)(\"aria-hidden\", ctx.isCollapsed);\n        ɵngcc0.ɵɵclassProp(\"collapse\", ctx.isCollapse)(\"in\", ctx.isExpanded)(\"show\", ctx.isExpanded)(\"collapsing\", ctx.isCollapsing);\n      }\n    },\n    inputs: {\n      isAnimated: \"isAnimated\",\n      display: \"display\",\n      collapse: \"collapse\"\n    },\n    outputs: {\n      collapsed: \"collapsed\",\n      collapses: \"collapses\",\n      expanded: \"expanded\",\n      expands: \"expands\"\n    },\n    exportAs: [\"bs-collapse\"]\n  });\n  /** @nocollapse */\n\n  return CollapseDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet CollapseModule = /*#__PURE__*/(() => {\n  class CollapseModule {\n    /**\n     * @return {?}\n     */\n    static forRoot() {\n      return {\n        ngModule: CollapseModule,\n        providers: []\n      };\n    }\n\n  }\n\n  CollapseModule.ɵfac = function CollapseModule_Factory(t) {\n    return new (t || CollapseModule)();\n  };\n\n  CollapseModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: CollapseModule\n  });\n  CollapseModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return CollapseModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CollapseModule, {\n    declarations: [CollapseDirective],\n    exports: [CollapseDirective]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { CollapseDirective, CollapseModule }; //# sourceMappingURL=ngx-bootstrap-collapse.js.map","map":null,"metadata":{},"sourceType":"module"}