{"ast":null,"code":"import { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Directive, forwardRef, HostBinding, HostListener, Input, ChangeDetectorRef, ElementRef, Optional, Renderer2, NgModule } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO: config: activeClass - Class to apply to the checked buttons\n\n/** @type {?} */\n\nimport * as ɵngcc0 from '@angular/core';\nconst CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(() => ButtonCheckboxDirective),\n  multi: true\n};\n/**\n * Add checkbox functionality to any element\n */\n\nlet ButtonCheckboxDirective = /*#__PURE__*/(() => {\n  class ButtonCheckboxDirective {\n    constructor() {\n      /**\n       * Truthy value, will be set to ngModel\n       */\n      this.btnCheckboxTrue = true;\n      /**\n       * Falsy value, will be set to ngModel\n       */\n\n      this.btnCheckboxFalse = false;\n      this.state = false;\n      this.onChange = Function.prototype;\n      this.onTouched = Function.prototype;\n    } // view -> model\n\n    /**\n     * @return {?}\n     */\n\n\n    onClick() {\n      if (this.isDisabled) {\n        return;\n      }\n\n      this.toggle(!this.state);\n      this.onChange(this.value);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      this.toggle(this.trueValue === this.value);\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n\n\n    get trueValue() {\n      return typeof this.btnCheckboxTrue !== 'undefined' ? this.btnCheckboxTrue : true;\n    }\n    /**\n     * @protected\n     * @return {?}\n     */\n\n\n    get falseValue() {\n      return typeof this.btnCheckboxFalse !== 'undefined' ? this.btnCheckboxFalse : false;\n    }\n    /**\n     * @param {?} state\n     * @return {?}\n     */\n\n\n    toggle(state) {\n      this.state = state;\n      this.value = this.state ? this.trueValue : this.falseValue;\n    } // ControlValueAccessor\n    // model -> view\n\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    writeValue(value) {\n      this.state = this.trueValue === value;\n      this.value = value ? this.trueValue : this.falseValue;\n    }\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n\n\n    setDisabledState(isDisabled) {\n      this.isDisabled = isDisabled;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n\n  }\n\n  ButtonCheckboxDirective.ɵfac = function ButtonCheckboxDirective_Factory(t) {\n    return new (t || ButtonCheckboxDirective)();\n  };\n\n  ButtonCheckboxDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ButtonCheckboxDirective,\n    selectors: [[\"\", \"btnCheckbox\", \"\"]],\n    hostVars: 3,\n    hostBindings: function ButtonCheckboxDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function ButtonCheckboxDirective_click_HostBindingHandler() {\n          return ctx.onClick();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-pressed\", ctx.state);\n        ɵngcc0.ɵɵclassProp(\"active\", ctx.state);\n      }\n    },\n    inputs: {\n      btnCheckboxTrue: \"btnCheckboxTrue\",\n      btnCheckboxFalse: \"btnCheckboxFalse\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([CHECKBOX_CONTROL_VALUE_ACCESSOR])]\n  });\n  return ButtonCheckboxDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst RADIO_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(() => ButtonRadioGroupDirective),\n  multi: true\n};\n/**\n * A group of radio buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\n\nlet ButtonRadioGroupDirective = /*#__PURE__*/(() => {\n  class ButtonRadioGroupDirective {\n    /**\n     * @param {?} cdr\n     */\n    constructor(cdr) {\n      this.cdr = cdr;\n      this.onChange = Function.prototype;\n      this.onTouched = Function.prototype;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get value() {\n      return this._value;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set value(value) {\n      this._value = value;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    writeValue(value) {\n      this._value = value;\n      this.cdr.markForCheck();\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n\n  }\n\n  ButtonRadioGroupDirective.ɵfac = function ButtonRadioGroupDirective_Factory(t) {\n    return new (t || ButtonRadioGroupDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  ButtonRadioGroupDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ButtonRadioGroupDirective,\n    selectors: [[\"\", \"btnRadioGroup\", \"\"]],\n    features: [ɵngcc0.ɵɵProvidersFeature([RADIO_CONTROL_VALUE_ACCESSOR])]\n  });\n  /** @nocollapse */\n\n  return ButtonRadioGroupDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst RADIO_CONTROL_VALUE_ACCESSOR$1 = {\n  provide: NG_VALUE_ACCESSOR,\n\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(() => ButtonRadioDirective),\n  multi: true\n};\n/**\n * Create radio buttons or groups of buttons.\n * A value of a selected button is bound to a variable specified via ngModel.\n */\n\nlet ButtonRadioDirective = /*#__PURE__*/(() => {\n  class ButtonRadioDirective {\n    /**\n     * @param {?} el\n     * @param {?} cdr\n     * @param {?} group\n     * @param {?} renderer\n     */\n    constructor(el, cdr, group, renderer) {\n      this.el = el;\n      this.cdr = cdr;\n      this.group = group;\n      this.renderer = renderer;\n      this.onChange = Function.prototype;\n      this.onTouched = Function.prototype;\n    }\n    /**\n     * Current value of radio component or group\n     * @return {?}\n     */\n\n\n    get value() {\n      return this.group ? this.group.value : this._value;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set value(value) {\n      if (this.group) {\n        this.group.value = value;\n        return;\n      }\n\n      this._value = value;\n    }\n    /**\n     * If `true` — radio button is disabled\n     * @return {?}\n     */\n\n\n    get disabled() {\n      return this._disabled;\n    }\n    /**\n     * @param {?} disabled\n     * @return {?}\n     */\n\n\n    set disabled(disabled) {\n      this._disabled = disabled;\n      this.setDisabledState(disabled);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get isActive() {\n      return this.btnRadio === this.value;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    onClick() {\n      if (this.el.nativeElement.attributes.disabled || !this.uncheckable && this.btnRadio === this.value) {\n        return;\n      }\n\n      this.value = this.uncheckable && this.btnRadio === this.value ? undefined : this.btnRadio;\n\n      this._onChange(this.value);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      this.uncheckable = typeof this.uncheckable !== 'undefined';\n    }\n    /**\n     * @return {?}\n     */\n\n\n    onBlur() {\n      this.onTouched();\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    _onChange(value) {\n      if (this.group) {\n        this.group.onTouched();\n        this.group.onChange(value);\n        return;\n      }\n\n      this.onTouched();\n      this.onChange(value);\n    } // ControlValueAccessor\n    // model -> view\n\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    writeValue(value) {\n      this.value = value;\n      this.cdr.markForCheck();\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /**\n     * @param {?} disabled\n     * @return {?}\n     */\n\n\n    setDisabledState(disabled) {\n      if (disabled) {\n        this.renderer.setAttribute(this.el.nativeElement, 'disabled', 'disabled');\n        return;\n      }\n\n      this.renderer.removeAttribute(this.el.nativeElement, 'disabled');\n    }\n\n  }\n\n  ButtonRadioDirective.ɵfac = function ButtonRadioDirective_Factory(t) {\n    return new (t || ButtonRadioDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ButtonRadioGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n  };\n\n  ButtonRadioDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ButtonRadioDirective,\n    selectors: [[\"\", \"btnRadio\", \"\"]],\n    hostVars: 3,\n    hostBindings: function ButtonRadioDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function ButtonRadioDirective_click_HostBindingHandler() {\n          return ctx.onClick();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-pressed\", ctx.isActive);\n        ɵngcc0.ɵɵclassProp(\"active\", ctx.isActive);\n      }\n    },\n    inputs: {\n      value: \"value\",\n      disabled: \"disabled\",\n      uncheckable: \"uncheckable\",\n      btnRadio: \"btnRadio\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([RADIO_CONTROL_VALUE_ACCESSOR$1])]\n  });\n  /** @nocollapse */\n\n  return ButtonRadioDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet ButtonsModule = /*#__PURE__*/(() => {\n  class ButtonsModule {\n    /**\n     * @return {?}\n     */\n    static forRoot() {\n      return {\n        ngModule: ButtonsModule,\n        providers: []\n      };\n    }\n\n  }\n\n  ButtonsModule.ɵfac = function ButtonsModule_Factory(t) {\n    return new (t || ButtonsModule)();\n  };\n\n  ButtonsModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ButtonsModule\n  });\n  ButtonsModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return ButtonsModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ButtonsModule, {\n    declarations: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective],\n    exports: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective]\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { ButtonCheckboxDirective, ButtonRadioGroupDirective, ButtonRadioDirective, ButtonsModule, CHECKBOX_CONTROL_VALUE_ACCESSOR as ɵa, RADIO_CONTROL_VALUE_ACCESSOR as ɵb, RADIO_CONTROL_VALUE_ACCESSOR$1 as ɵc }; //# sourceMappingURL=ngx-bootstrap-buttons.js.map","map":null,"metadata":{},"sourceType":"module"}