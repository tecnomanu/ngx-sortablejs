{"ast":null,"code":"import { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { Injectable, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Input, Output, NgModule } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Provides default values for Pagination and pager components\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nconst _c0 = function (a0, a1) {\n  return {\n    \"pull-right\": a0,\n    \"float-right\": a1\n  };\n};\n\nfunction PaginationComponent_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"li\", 6)(1, \"a\", 7);\n    ɵngcc0.ɵɵlistener(\"click\", function PaginationComponent_li_1_Template_a_click_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r6);\n      const ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.selectPage(1, $event);\n    });\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"disabled\", ctx_r0.noPrevious() || ctx_r0.disabled);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"innerHTML\", ctx_r0.getText(\"first\"), ɵngcc0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction PaginationComponent_li_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"li\", 8)(1, \"a\", 7);\n    ɵngcc0.ɵɵlistener(\"click\", function PaginationComponent_li_2_Template_a_click_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      const ctx_r7 = ɵngcc0.ɵɵnextContext();\n      return ctx_r7.selectPage(ctx_r7.page - 1, $event);\n    });\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"disabled\", ctx_r1.noPrevious() || ctx_r1.disabled);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"innerHTML\", ctx_r1.getText(\"previous\"), ɵngcc0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction PaginationComponent_li_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"li\", 9)(1, \"a\", 7);\n    ɵngcc0.ɵɵlistener(\"click\", function PaginationComponent_li_3_Template_a_click_1_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r11);\n      const pg_r9 = restoredCtx.$implicit;\n      const ctx_r10 = ɵngcc0.ɵɵnextContext();\n      return ctx_r10.selectPage(pg_r9.number, $event);\n    });\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const pg_r9 = ctx.$implicit;\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"active\", pg_r9.active)(\"disabled\", ctx_r2.disabled && !pg_r9.active);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"innerHTML\", pg_r9.text, ɵngcc0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction PaginationComponent_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"li\", 10)(1, \"a\", 7);\n    ɵngcc0.ɵɵlistener(\"click\", function PaginationComponent_li_4_Template_a_click_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      const ctx_r12 = ɵngcc0.ɵɵnextContext();\n      return ctx_r12.selectPage(ctx_r12.page + 1, $event);\n    });\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"disabled\", ctx_r3.noNext() || ctx_r3.disabled);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"innerHTML\", ctx_r3.getText(\"next\"), ɵngcc0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction PaginationComponent_li_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"li\", 11)(1, \"a\", 7);\n    ɵngcc0.ɵɵlistener(\"click\", function PaginationComponent_li_5_Template_a_click_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r15);\n      const ctx_r14 = ɵngcc0.ɵɵnextContext();\n      return ctx_r14.selectPage(ctx_r14.totalPages, $event);\n    });\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"disabled\", ctx_r4.noNext() || ctx_r4.disabled);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"innerHTML\", ctx_r4.getText(\"last\"), ɵngcc0.ɵɵsanitizeHtml);\n  }\n}\n\nlet PaginationConfig = /*#__PURE__*/(() => {\n  class PaginationConfig {\n    constructor() {\n      this.main = {\n        maxSize: void 0,\n        itemsPerPage: 10,\n        boundaryLinks: false,\n        directionLinks: true,\n        firstText: 'First',\n        previousText: 'Previous',\n        nextText: 'Next',\n        lastText: 'Last',\n        pageBtnClass: '',\n        rotate: true\n      };\n      this.pager = {\n        itemsPerPage: 15,\n        previousText: '« Previous',\n        nextText: 'Next »',\n        pageBtnClass: '',\n        align: true\n      };\n    }\n\n  }\n\n  PaginationConfig.ɵfac = function PaginationConfig_Factory(t) {\n    return new (t || PaginationConfig)();\n  };\n\n  PaginationConfig.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: PaginationConfig,\n    factory: PaginationConfig.ɵfac\n  });\n  return PaginationConfig;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst PAGER_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(() => PagerComponent),\n  multi: true\n};\nlet PagerComponent = /*#__PURE__*/(() => {\n  class PagerComponent {\n    /**\n     * @param {?} elementRef\n     * @param {?} paginationConfig\n     * @param {?} changeDetection\n     */\n    constructor(elementRef, paginationConfig, changeDetection) {\n      this.elementRef = elementRef;\n      this.changeDetection = changeDetection;\n      /**\n       * fired when total pages count changes, $event:number equals to total pages count\n       */\n\n      this.numPages = new EventEmitter();\n      /**\n       * fired when page was changed, $event:{page, itemsPerPage} equals to\n       * object with current page index and number of items per page\n       */\n\n      this.pageChanged = new EventEmitter();\n      this.onChange = Function.prototype;\n      this.onTouched = Function.prototype;\n      this.inited = false;\n      this._page = 1;\n      this.elementRef = elementRef;\n\n      if (!this.config) {\n        this.configureOptions(Object.assign({}, paginationConfig.main, paginationConfig.pager));\n      }\n    }\n    /**\n     * maximum number of items per page. If value less than 1 will display all items on one page\n     * @return {?}\n     */\n\n\n    get itemsPerPage() {\n      return this._itemsPerPage;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n\n\n    set itemsPerPage(v) {\n      this._itemsPerPage = v;\n      this.totalPages = this.calculateTotalPages();\n    }\n    /**\n     * total number of items in all pages\n     * @return {?}\n     */\n\n\n    get totalItems() {\n      return this._totalItems;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n\n\n    set totalItems(v) {\n      this._totalItems = v;\n      this.totalPages = this.calculateTotalPages();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get totalPages() {\n      return this._totalPages;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n\n\n    set totalPages(v) {\n      this._totalPages = v;\n      this.numPages.emit(v);\n\n      if (this.inited) {\n        this.selectPage(this.page);\n      }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set page(value) {\n      /** @type {?} */\n      const _previous = this._page;\n      this._page = value > this.totalPages ? this.totalPages : value || 1;\n      this.changeDetection.markForCheck();\n\n      if (_previous === this._page || typeof _previous === 'undefined') {\n        return;\n      }\n\n      this.pageChanged.emit({\n        page: this._page,\n        itemsPerPage: this.itemsPerPage\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get page() {\n      return this._page;\n    }\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n\n\n    configureOptions(config) {\n      this.config = Object.assign({}, config);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      if (typeof window !== 'undefined') {\n        this.classMap = this.elementRef.nativeElement.getAttribute('class') || '';\n      } // watch for maxSize\n\n\n      this.maxSize = typeof this.maxSize !== 'undefined' ? this.maxSize : this.config.maxSize;\n      this.rotate = typeof this.rotate !== 'undefined' ? this.rotate : this.config.rotate;\n      this.boundaryLinks = typeof this.boundaryLinks !== 'undefined' ? this.boundaryLinks : this.config.boundaryLinks;\n      this.directionLinks = typeof this.directionLinks !== 'undefined' ? this.directionLinks : this.config.directionLinks;\n      this.pageBtnClass = typeof this.pageBtnClass !== 'undefined' ? this.pageBtnClass : this.config.pageBtnClass; // base class\n\n      this.itemsPerPage = typeof this.itemsPerPage !== 'undefined' ? this.itemsPerPage : this.config.itemsPerPage;\n      this.totalPages = this.calculateTotalPages(); // this class\n\n      this.pages = this.getPages(this.page, this.totalPages);\n      this.inited = true;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    writeValue(value) {\n      this.page = value;\n      this.pages = this.getPages(this.page, this.totalPages);\n    }\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n\n\n    getText(key) {\n      // tslint:disable-next-line:no-any\n      return (\n        /** @type {?} */\n        this[`${key}Text`] ||\n        /** @type {?} */\n        this.config[`${key}Text`]\n      );\n    }\n    /**\n     * @return {?}\n     */\n\n\n    noPrevious() {\n      return this.page === 1;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    noNext() {\n      return this.page === this.totalPages;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /**\n     * @param {?} page\n     * @param {?=} event\n     * @return {?}\n     */\n\n\n    selectPage(page, event) {\n      if (event) {\n        event.preventDefault();\n      }\n\n      if (!this.disabled) {\n        if (event && event.target) {\n          // tslint:disable-next-line:no-any\n\n          /** @type {?} */\n          const target = event.target;\n          target.blur();\n        }\n\n        this.writeValue(page);\n        this.onChange(this.page);\n      }\n    } // Create page object used in template\n\n    /**\n     * @protected\n     * @param {?} num\n     * @param {?} text\n     * @param {?} active\n     * @return {?}\n     */\n\n\n    makePage(num, text, active) {\n      return {\n        text,\n        number: num,\n        active\n      };\n    }\n    /**\n     * @protected\n     * @param {?} currentPage\n     * @param {?} totalPages\n     * @return {?}\n     */\n\n\n    getPages(currentPage, totalPages) {\n      /** @type {?} */\n      const pages = []; // Default page limits\n\n      /** @type {?} */\n\n      let startPage = 1;\n      /** @type {?} */\n\n      let endPage = totalPages;\n      /** @type {?} */\n\n      const isMaxSized = typeof this.maxSize !== 'undefined' && this.maxSize < totalPages; // recompute if maxSize\n\n      if (isMaxSized) {\n        if (this.rotate) {\n          // Current page is displayed in the middle of the visible ones\n          startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);\n          endPage = startPage + this.maxSize - 1; // Adjust if limit is exceeded\n\n          if (endPage > totalPages) {\n            endPage = totalPages;\n            startPage = endPage - this.maxSize + 1;\n          }\n        } else {\n          // Visible pages are paginated with maxSize\n          startPage = (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1; // Adjust last page if limit is exceeded\n\n          endPage = Math.min(startPage + this.maxSize - 1, totalPages);\n        }\n      } // Add page number links\n\n\n      for (let num = startPage; num <= endPage; num++) {\n        /** @type {?} */\n        const page = this.makePage(num, num.toString(), num === currentPage);\n        pages.push(page);\n      } // Add links to move between page sets\n\n\n      if (isMaxSized && !this.rotate) {\n        if (startPage > 1) {\n          /** @type {?} */\n          const previousPageSet = this.makePage(startPage - 1, '...', false);\n          pages.unshift(previousPageSet);\n        }\n\n        if (endPage < totalPages) {\n          /** @type {?} */\n          const nextPageSet = this.makePage(endPage + 1, '...', false);\n          pages.push(nextPageSet);\n        }\n      }\n\n      return pages;\n    } // base class\n\n    /**\n     * @protected\n     * @return {?}\n     */\n\n\n    calculateTotalPages() {\n      /** @type {?} */\n      const totalPages = this.itemsPerPage < 1 ? 1 : Math.ceil(this.totalItems / this.itemsPerPage);\n      return Math.max(totalPages || 0, 1);\n    }\n\n  }\n\n  PagerComponent.ɵfac = function PagerComponent_Factory(t) {\n    return new (t || PagerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(PaginationConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  PagerComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: PagerComponent,\n    selectors: [[\"pager\"]],\n    inputs: {\n      itemsPerPage: \"itemsPerPage\",\n      totalItems: \"totalItems\",\n      maxSize: \"maxSize\",\n      rotate: \"rotate\",\n      boundaryLinks: \"boundaryLinks\",\n      directionLinks: \"directionLinks\",\n      pageBtnClass: \"pageBtnClass\",\n      align: \"align\",\n      firstText: \"firstText\",\n      previousText: \"previousText\",\n      nextText: \"nextText\",\n      lastText: \"lastText\",\n      disabled: \"disabled\"\n    },\n    outputs: {\n      numPages: \"numPages\",\n      pageChanged: \"pageChanged\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([PAGER_CONTROL_VALUE_ACCESSOR])],\n    decls: 7,\n    vars: 24,\n    consts: [[1, \"pager\"], [3, \"ngClass\"], [\"href\", \"\", 3, \"click\"]],\n    template: function PagerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"ul\", 0)(1, \"li\", 1)(2, \"a\", 2);\n        ɵngcc0.ɵɵlistener(\"click\", function PagerComponent_Template_a_click_2_listener($event) {\n          return ctx.selectPage(ctx.page - 1, $event);\n        });\n        ɵngcc0.ɵɵtext(3);\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵelementStart(4, \"li\", 1)(5, \"a\", 2);\n        ɵngcc0.ɵɵlistener(\"click\", function PagerComponent_Template_a_click_5_listener($event) {\n          return ctx.selectPage(ctx.page + 1, $event);\n        });\n        ɵngcc0.ɵɵtext(6);\n        ɵngcc0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵclassMap(ctx.pageBtnClass);\n        ɵngcc0.ɵɵclassProp(\"disabled\", ctx.noPrevious())(\"previous\", ctx.align);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(18, _c0, ctx.align, ctx.align));\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.getText(\"previous\"));\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵclassMap(ctx.pageBtnClass);\n        ɵngcc0.ɵɵclassProp(\"disabled\", ctx.noNext())(\"next\", ctx.align);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(21, _c0, ctx.align, ctx.align));\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.getText(\"next\"));\n      }\n    },\n    directives: [ɵngcc1.NgClass],\n    encapsulation: 2\n  });\n  /** @nocollapse */\n\n  return PagerComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nconst PAGINATION_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(() => PaginationComponent),\n  multi: true\n};\nlet PaginationComponent = /*#__PURE__*/(() => {\n  class PaginationComponent {\n    /**\n     * @param {?} elementRef\n     * @param {?} paginationConfig\n     * @param {?} changeDetection\n     */\n    constructor(elementRef, paginationConfig, changeDetection) {\n      this.elementRef = elementRef;\n      this.changeDetection = changeDetection;\n      /**\n       * fired when total pages count changes, $event:number equals to total pages count\n       */\n\n      this.numPages = new EventEmitter();\n      /**\n       * fired when page was changed, $event:{page, itemsPerPage} equals to object\n       * with current page index and number of items per page\n       */\n\n      this.pageChanged = new EventEmitter();\n      this.onChange = Function.prototype;\n      this.onTouched = Function.prototype;\n      this.inited = false;\n      this._page = 1;\n      this.elementRef = elementRef;\n\n      if (!this.config) {\n        this.configureOptions(paginationConfig.main);\n      }\n    }\n    /**\n     * maximum number of items per page. If value less than 1 will display all items on one page\n     * @return {?}\n     */\n\n\n    get itemsPerPage() {\n      return this._itemsPerPage;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n\n\n    set itemsPerPage(v) {\n      this._itemsPerPage = v;\n      this.totalPages = this.calculateTotalPages();\n    }\n    /**\n     * total number of items in all pages\n     * @return {?}\n     */\n\n\n    get totalItems() {\n      return this._totalItems;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n\n\n    set totalItems(v) {\n      this._totalItems = v;\n      this.totalPages = this.calculateTotalPages();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get totalPages() {\n      return this._totalPages;\n    }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n\n\n    set totalPages(v) {\n      this._totalPages = v;\n      this.numPages.emit(v);\n\n      if (this.inited) {\n        this.selectPage(this.page);\n      }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set page(value) {\n      /** @type {?} */\n      const _previous = this._page;\n      this._page = value > this.totalPages ? this.totalPages : value || 1;\n      this.changeDetection.markForCheck();\n\n      if (_previous === this._page || typeof _previous === 'undefined') {\n        return;\n      }\n\n      this.pageChanged.emit({\n        page: this._page,\n        itemsPerPage: this.itemsPerPage\n      });\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get page() {\n      return this._page;\n    }\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n\n\n    configureOptions(config) {\n      this.config = Object.assign({}, config);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      if (typeof window !== 'undefined') {\n        this.classMap = this.elementRef.nativeElement.getAttribute('class') || '';\n      } // watch for maxSize\n\n\n      this.maxSize = typeof this.maxSize !== 'undefined' ? this.maxSize : this.config.maxSize;\n      this.rotate = typeof this.rotate !== 'undefined' ? this.rotate : this.config.rotate;\n      this.boundaryLinks = typeof this.boundaryLinks !== 'undefined' ? this.boundaryLinks : this.config.boundaryLinks;\n      this.directionLinks = typeof this.directionLinks !== 'undefined' ? this.directionLinks : this.config.directionLinks;\n      this.pageBtnClass = typeof this.pageBtnClass !== 'undefined' ? this.pageBtnClass : this.config.pageBtnClass; // base class\n\n      this.itemsPerPage = typeof this.itemsPerPage !== 'undefined' ? this.itemsPerPage : this.config.itemsPerPage;\n      this.totalPages = this.calculateTotalPages(); // this class\n\n      this.pages = this.getPages(this.page, this.totalPages);\n      this.inited = true;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    writeValue(value) {\n      this.page = value;\n      this.pages = this.getPages(this.page, this.totalPages);\n    }\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n\n\n    getText(key) {\n      // tslint:disable-next-line:no-any\n      return (\n        /** @type {?} */\n        this[`${key}Text`] ||\n        /** @type {?} */\n        this.config[`${key}Text`]\n      );\n    }\n    /**\n     * @return {?}\n     */\n\n\n    noPrevious() {\n      return this.page === 1;\n    }\n    /**\n     * @return {?}\n     */\n\n\n    noNext() {\n      return this.page === this.totalPages;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n\n\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /**\n     * @param {?} page\n     * @param {?=} event\n     * @return {?}\n     */\n\n\n    selectPage(page, event) {\n      if (event) {\n        event.preventDefault();\n      }\n\n      if (!this.disabled) {\n        if (event && event.target) {\n          // tslint:disable-next-line:no-any\n\n          /** @type {?} */\n          const target = event.target;\n          target.blur();\n        }\n\n        this.writeValue(page);\n        this.onChange(this.page);\n      }\n    } // Create page object used in template\n\n    /**\n     * @protected\n     * @param {?} num\n     * @param {?} text\n     * @param {?} active\n     * @return {?}\n     */\n\n\n    makePage(num, text, active) {\n      return {\n        text,\n        number: num,\n        active\n      };\n    }\n    /**\n     * @protected\n     * @param {?} currentPage\n     * @param {?} totalPages\n     * @return {?}\n     */\n\n\n    getPages(currentPage, totalPages) {\n      /** @type {?} */\n      const pages = []; // Default page limits\n\n      /** @type {?} */\n\n      let startPage = 1;\n      /** @type {?} */\n\n      let endPage = totalPages;\n      /** @type {?} */\n\n      const isMaxSized = typeof this.maxSize !== 'undefined' && this.maxSize < totalPages; // recompute if maxSize\n\n      if (isMaxSized) {\n        if (this.rotate) {\n          // Current page is displayed in the middle of the visible ones\n          startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);\n          endPage = startPage + this.maxSize - 1; // Adjust if limit is exceeded\n\n          if (endPage > totalPages) {\n            endPage = totalPages;\n            startPage = endPage - this.maxSize + 1;\n          }\n        } else {\n          // Visible pages are paginated with maxSize\n          startPage = (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1; // Adjust last page if limit is exceeded\n\n          endPage = Math.min(startPage + this.maxSize - 1, totalPages);\n        }\n      } // Add page number links\n\n\n      for (let num = startPage; num <= endPage; num++) {\n        /** @type {?} */\n        const page = this.makePage(num, num.toString(), num === currentPage);\n        pages.push(page);\n      } // Add links to move between page sets\n\n\n      if (isMaxSized && !this.rotate) {\n        if (startPage > 1) {\n          /** @type {?} */\n          const previousPageSet = this.makePage(startPage - 1, '...', false);\n          pages.unshift(previousPageSet);\n        }\n\n        if (endPage < totalPages) {\n          /** @type {?} */\n          const nextPageSet = this.makePage(endPage + 1, '...', false);\n          pages.push(nextPageSet);\n        }\n      }\n\n      return pages;\n    } // base class\n\n    /**\n     * @protected\n     * @return {?}\n     */\n\n\n    calculateTotalPages() {\n      /** @type {?} */\n      const totalPages = this.itemsPerPage < 1 ? 1 : Math.ceil(this.totalItems / this.itemsPerPage);\n      return Math.max(totalPages || 0, 1);\n    }\n\n  }\n\n  PaginationComponent.ɵfac = function PaginationComponent_Factory(t) {\n    return new (t || PaginationComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(PaginationConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  PaginationComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: PaginationComponent,\n    selectors: [[\"pagination\"]],\n    inputs: {\n      itemsPerPage: \"itemsPerPage\",\n      totalItems: \"totalItems\",\n      maxSize: \"maxSize\",\n      rotate: \"rotate\",\n      boundaryLinks: \"boundaryLinks\",\n      directionLinks: \"directionLinks\",\n      pageBtnClass: \"pageBtnClass\",\n      align: \"align\",\n      firstText: \"firstText\",\n      previousText: \"previousText\",\n      nextText: \"nextText\",\n      lastText: \"lastText\",\n      disabled: \"disabled\"\n    },\n    outputs: {\n      numPages: \"numPages\",\n      pageChanged: \"pageChanged\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([PAGINATION_CONTROL_VALUE_ACCESSOR])],\n    decls: 6,\n    vars: 6,\n    consts: [[1, \"pagination\", 3, \"ngClass\"], [\"class\", \"pagination-first page-item\", 3, \"disabled\", 4, \"ngIf\"], [\"class\", \"pagination-prev page-item\", 3, \"disabled\", 4, \"ngIf\"], [\"class\", \"pagination-page page-item\", 3, \"active\", \"disabled\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"pagination-next page-item\", 3, \"disabled\", 4, \"ngIf\"], [\"class\", \"pagination-last page-item\", 3, \"disabled\", 4, \"ngIf\"], [1, \"pagination-first\", \"page-item\"], [\"href\", \"\", 1, \"page-link\", 3, \"innerHTML\", \"click\"], [1, \"pagination-prev\", \"page-item\"], [1, \"pagination-page\", \"page-item\"], [1, \"pagination-next\", \"page-item\"], [1, \"pagination-last\", \"page-item\"]],\n    template: function PaginationComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"ul\", 0);\n        ɵngcc0.ɵɵtemplate(1, PaginationComponent_li_1_Template, 2, 3, \"li\", 1);\n        ɵngcc0.ɵɵtemplate(2, PaginationComponent_li_2_Template, 2, 3, \"li\", 2);\n        ɵngcc0.ɵɵtemplate(3, PaginationComponent_li_3_Template, 2, 5, \"li\", 3);\n        ɵngcc0.ɵɵtemplate(4, PaginationComponent_li_4_Template, 2, 3, \"li\", 4);\n        ɵngcc0.ɵɵtemplate(5, PaginationComponent_li_5_Template, 2, 3, \"li\", 5);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.classMap);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.boundaryLinks);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.directionLinks);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.pages);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.directionLinks);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.boundaryLinks);\n      }\n    },\n    directives: [ɵngcc1.NgClass, ɵngcc1.NgIf, ɵngcc1.NgForOf],\n    encapsulation: 2\n  });\n  /** @nocollapse */\n\n  return PaginationComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet PaginationModule = /*#__PURE__*/(() => {\n  class PaginationModule {\n    /**\n     * @return {?}\n     */\n    static forRoot() {\n      return {\n        ngModule: PaginationModule,\n        providers: [PaginationConfig]\n      };\n    }\n\n  }\n\n  PaginationModule.ɵfac = function PaginationModule_Factory(t) {\n    return new (t || PaginationModule)();\n  };\n\n  PaginationModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: PaginationModule\n  });\n  PaginationModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return PaginationModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PaginationModule, {\n    declarations: function () {\n      return [PagerComponent, PaginationComponent];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [PagerComponent, PaginationComponent];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { PagerComponent, PaginationComponent, PaginationModule, PaginationConfig, PAGER_CONTROL_VALUE_ACCESSOR as ɵa, PAGINATION_CONTROL_VALUE_ACCESSOR as ɵb }; //# sourceMappingURL=ngx-bootstrap-pagination.js.map","map":null,"metadata":{},"sourceType":"module"}