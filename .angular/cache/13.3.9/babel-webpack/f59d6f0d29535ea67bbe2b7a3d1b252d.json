{"ast":null,"code":"import { isBs3 } from 'ngx-bootstrap/utils';\nimport { CommonModule } from '@angular/common';\nimport { Injectable, Component, Input, HostBinding, Inject, Output, EventEmitter, NgModule } from '@angular/core';\nimport { CollapseModule } from 'ngx-bootstrap/collapse';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Configuration service, provides default values for the AccordionComponent.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from 'ngx-bootstrap/collapse';\nconst _c0 = [\"*\"];\n\nconst _c1 = function (a0) {\n  return {\n    \"text-muted\": a0\n  };\n};\n\nfunction AccordionPanelComponent_button_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"button\", 7);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(2, _c1, ctx_r0.isDisabled));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r0.heading, \" \");\n  }\n}\n\nconst _c2 = [[[\"\", \"accordion-heading\", \"\"]], \"*\"];\nconst _c3 = [\"[accordion-heading]\", \"*\"];\nlet AccordionConfig = /*#__PURE__*/(() => {\n  class AccordionConfig {\n    constructor() {\n      /**\n       * Whether the other panels should be closed when a panel is opened\n       */\n      this.closeOthers = false;\n      /**\n       * turn on/off animation\n       */\n\n      this.isAnimated = false;\n    }\n\n  }\n\n  AccordionConfig.ɵfac = function AccordionConfig_Factory(t) {\n    return new (t || AccordionConfig)();\n  };\n\n  AccordionConfig.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: AccordionConfig,\n    factory: AccordionConfig.ɵfac\n  });\n  return AccordionConfig;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Displays collapsible content panels for presenting information in a limited amount of space.\n */\n\n\nlet AccordionComponent = /*#__PURE__*/(() => {\n  class AccordionComponent {\n    /**\n     * @param {?} config\n     */\n    constructor(config) {\n      /**\n       * turn on/off animation\n       */\n      this.isAnimated = false;\n      this.groups = [];\n      Object.assign(this, config);\n    }\n    /**\n     * @param {?} openGroup\n     * @return {?}\n     */\n\n\n    closeOtherPanels(openGroup) {\n      if (!this.closeOthers) {\n        return;\n      }\n\n      this.groups.forEach(group => {\n        if (group !== openGroup) {\n          group.isOpen = false;\n        }\n      });\n    }\n    /**\n     * @param {?} group\n     * @return {?}\n     */\n\n\n    addGroup(group) {\n      group.isAnimated = this.isAnimated;\n      this.groups.push(group);\n    }\n    /**\n     * @param {?} group\n     * @return {?}\n     */\n\n\n    removeGroup(group) {\n      /** @type {?} */\n      const index = this.groups.indexOf(group);\n\n      if (index !== -1) {\n        this.groups.splice(index, 1);\n      }\n    }\n\n  }\n\n  AccordionComponent.ɵfac = function AccordionComponent_Factory(t) {\n    return new (t || AccordionComponent)(ɵngcc0.ɵɵdirectiveInject(AccordionConfig));\n  };\n\n  AccordionComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: AccordionComponent,\n    selectors: [[\"accordion\"]],\n    hostAttrs: [\"role\", \"tablist\", 1, \"panel-group\", 2, \"display\", \"block\"],\n    hostVars: 1,\n    hostBindings: function AccordionComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-multiselectable\", ctx.closeOthers);\n      }\n    },\n    inputs: {\n      isAnimated: \"isAnimated\",\n      closeOthers: \"closeOthers\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function AccordionComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  /** @nocollapse */\n\n  return AccordionComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * ### Accordion heading\n * Instead of using `heading` attribute on the `accordion-group`, you can use\n * an `accordion-heading` attribute on `any` element inside of a group that\n * will be used as group's header template.\n */\n\n\nlet AccordionPanelComponent = /*#__PURE__*/(() => {\n  class AccordionPanelComponent {\n    /**\n     * @param {?} accordion\n     */\n    constructor(accordion) {\n      /**\n       * turn on/off animation\n       */\n      this.isAnimated = false;\n      /**\n       * Emits when the opened state changes\n       */\n\n      this.isOpenChange = new EventEmitter();\n      this._isOpen = false;\n      this.accordion = accordion;\n    } // Questionable, maybe .panel-open should be on child div.panel element?\n\n    /**\n     * Is accordion group open or closed. This property supports two-way binding\n     * @return {?}\n     */\n\n\n    get isOpen() {\n      return this._isOpen;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n\n\n    set isOpen(value) {\n      if (value !== this.isOpen) {\n        if (value) {\n          this.accordion.closeOtherPanels(this);\n        }\n\n        this._isOpen = value;\n        Promise.resolve(null).then(() => {\n          this.isOpenChange.emit(value);\n        }).catch(error => {\n          /* tslint:disable: no-console */\n          console.log(error);\n        });\n      }\n    }\n    /**\n     * @return {?}\n     */\n\n\n    get isBs3() {\n      return isBs3();\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnInit() {\n      this.panelClass = this.panelClass || 'panel-default';\n      this.accordion.addGroup(this);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    ngOnDestroy() {\n      this.accordion.removeGroup(this);\n    }\n    /**\n     * @return {?}\n     */\n\n\n    toggleOpen() {\n      if (!this.isDisabled) {\n        this.isOpen = !this.isOpen;\n      }\n    }\n\n  }\n\n  AccordionPanelComponent.ɵfac = function AccordionPanelComponent_Factory(t) {\n    return new (t || AccordionPanelComponent)(ɵngcc0.ɵɵdirectiveInject(AccordionComponent));\n  };\n\n  AccordionPanelComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: AccordionPanelComponent,\n    selectors: [[\"accordion-group\"], [\"accordion-panel\"]],\n    hostAttrs: [1, \"panel\", 2, \"display\", \"block\"],\n    hostVars: 2,\n    hostBindings: function AccordionPanelComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"panel-open\", ctx.isOpen);\n      }\n    },\n    inputs: {\n      isOpen: \"isOpen\",\n      panelClass: \"panelClass\",\n      heading: \"heading\",\n      isDisabled: \"isDisabled\"\n    },\n    outputs: {\n      isOpenChange: \"isOpenChange\"\n    },\n    ngContentSelectors: _c3,\n    decls: 9,\n    vars: 5,\n    consts: [[1, \"panel\", \"card\", 3, \"ngClass\"], [\"role\", \"tab\", 1, \"panel-heading\", \"card-header\", 3, \"click\"], [1, \"panel-title\"], [\"role\", \"button\", 1, \"accordion-toggle\"], [\"class\", \"btn btn-link\", 3, \"ngClass\", 4, \"ngIf\"], [\"role\", \"tabpanel\", 1, \"panel-collapse\", \"collapse\", 3, \"collapse\", \"isAnimated\"], [1, \"panel-body\", \"card-block\", \"card-body\"], [1, \"btn\", \"btn-link\", 3, \"ngClass\"]],\n    template: function AccordionPanelComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c2);\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        ɵngcc0.ɵɵlistener(\"click\", function AccordionPanelComponent_Template_div_click_1_listener() {\n          return ctx.toggleOpen();\n        });\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2)(3, \"div\", 3);\n        ɵngcc0.ɵɵtemplate(4, AccordionPanelComponent_button_4_Template, 2, 4, \"button\", 4);\n        ɵngcc0.ɵɵprojection(5);\n        ɵngcc0.ɵɵelementEnd()()();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 5)(7, \"div\", 6);\n        ɵngcc0.ɵɵprojection(8, 1);\n        ɵngcc0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.panelClass);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isOpen);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.heading);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"collapse\", !ctx.isOpen)(\"isAnimated\", ctx.isAnimated);\n      }\n    },\n    directives: [ɵngcc1.NgClass, ɵngcc1.NgIf, ɵngcc2.CollapseDirective],\n    encapsulation: 2\n  });\n  /** @nocollapse */\n\n  return AccordionPanelComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nlet AccordionModule = /*#__PURE__*/(() => {\n  class AccordionModule {\n    /**\n     * @return {?}\n     */\n    static forRoot() {\n      return {\n        ngModule: AccordionModule,\n        providers: [AccordionConfig]\n      };\n    }\n\n  }\n\n  AccordionModule.ɵfac = function AccordionModule_Factory(t) {\n    return new (t || AccordionModule)();\n  };\n\n  AccordionModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: AccordionModule\n  });\n  AccordionModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, CollapseModule]]\n  });\n  return AccordionModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AccordionModule, {\n    declarations: function () {\n      return [AccordionComponent, AccordionPanelComponent];\n    },\n    imports: function () {\n      return [CommonModule, CollapseModule];\n    },\n    exports: function () {\n      return [AccordionComponent, AccordionPanelComponent];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { AccordionPanelComponent, AccordionComponent, AccordionModule, AccordionConfig }; //# sourceMappingURL=ngx-bootstrap-accordion.js.map","map":null,"metadata":{},"sourceType":"module"}